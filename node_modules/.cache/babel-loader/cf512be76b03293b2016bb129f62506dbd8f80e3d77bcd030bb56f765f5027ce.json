{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\osqel\\\\OneDrive\\\\Desktop\\\\New folder\\\\src\\\\components\\\\ScrambleGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport '../styles/ScrambleGame.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst animals = [{\n  name: 'ზებრა',\n  image: 'ზებრა.webp'\n}, {\n  name: 'სპილო',\n  image: 'სპილო.webp'\n}, {\n  name: 'ლომი',\n  image: 'ლომი.webp'\n}, {\n  name: 'დათვი',\n  image: 'დათვი.webp'\n}, {\n  name: 'მგელი',\n  image: 'მგელო.webp'\n}, {\n  name: 'ირემი',\n  image: 'ირემი.webp'\n}, {\n  name: 'თხა',\n  image: 'თხა.webp'\n}, {\n  name: 'კურდღელი',\n  image: 'კურდღელი.webp'\n}, {\n  name: 'ფლამინგო',\n  image: 'ფლამინგო.webp'\n}, {\n  name: 'სელაპი',\n  image: 'სელაპი.webp'\n}, {\n  name: 'ციყვი',\n  image: 'ციყვი.webp'\n}, {\n  name: 'ენოტი',\n  image: 'ენოტი.webp'\n}, {\n  name: 'ზარმაცა',\n  image: 'ზარმაცა.webp'\n}, {\n  name: 'ზღარბი',\n  image: 'ზღარბი.webp'\n}, {\n  name: 'ქამელეონი',\n  image: 'ქამელეონი.webp'\n}, {\n  name: 'ოპოსუმი',\n  image: 'ოპოსუმი.webp'\n}, {\n  name: 'რვაფეხა',\n  image: 'რვაფეხა.webp'\n}, {\n  name: 'თახვი',\n  image: 'თახვი.webp'\n}, {\n  name: 'ბეგემოტი',\n  image: 'ბეგემოტი.webp'\n}, {\n  name: 'ლამა',\n  image: 'ლამა.webp'\n}, {\n  name: 'ჟირაფი',\n  image: 'ჟირაფი.webp'\n}, {\n  name: 'კენგურუ',\n  image: 'კენგურუ.webp'\n}, {\n  name: 'ბუ',\n  image: 'ბუ.webp'\n}, {\n  name: 'პანდა',\n  image: 'პანდა.webp'\n}, {\n  name: 'მელია',\n  image: 'მელია.webp'\n}, {\n  name: 'დელფინი',\n  image: 'დელფინი.webp'\n}, {\n  name: 'კოალა',\n  image: 'კოალა.webp'\n}, {\n  name: 'პინგვინი',\n  image: 'პნგვინი.webp'\n}, {\n  name: 'კიბორჩხალა',\n  image: 'კიბორჩხალა.webp'\n}, {\n  name: 'ობობა',\n  image: 'ობობა.webp'\n}, {\n  name: 'გველი',\n  image: 'გველი.webp'\n}, {\n  name: 'ხვლიკი',\n  image: 'ხვლიკი.webp'\n}, {\n  name: 'ზვიგენი',\n  image: 'ზვიგენი.webp'\n}, {\n  name: 'ფარშევანგი',\n  image: 'ფარშევანგი.webp'\n}, {\n  name: 'კოდალა',\n  image: 'კოდალა.webp'\n}, {\n  name: 'აქლემი',\n  image: 'აქლემი.webp'\n}, {\n  name: 'პეპელა',\n  image: 'პეპელა.webp'\n}, {\n  name: 'არწივი',\n  image: 'არწივი.webp'\n}];\nconst ScrambleGame = () => {\n  _s();\n  const [currentAnimal, setCurrentAnimal] = useState(null);\n  const [scrambledLetters, setScrambledLetters] = useState([]);\n  const [correctPositions, setCorrectPositions] = useState([]);\n  const lettersContainerRef = useRef(null);\n  const [draggedLetter, setDraggedLetter] = useState(null);\n  const scrambleWord = word => {\n    const originalLetters = word.split('');\n    let scrambledIndices = Array.from({\n      length: word.length\n    }, (_, i) => i);\n\n    // შევქმნათ ისეთი მასივი სადაც არცერთი ინდექსი არ ემთხვევა თავის ორიგინალ პოზიციას\n    for (let i = 0; i < word.length; i++) {\n      let currentIndex = scrambledIndices[i];\n      if (currentIndex === i) {\n        // თუ ინდექსი ემთხვევა თავის პოზიციას, ვცვლით სხვა პოზიციასთან\n        for (let j = i + 1; j < word.length; j++) {\n          if (scrambledIndices[j] !== i) {\n            // გავცვალოთ პოზიციები\n            [scrambledIndices[i], scrambledIndices[j]] = [scrambledIndices[j], scrambledIndices[i]];\n            break;\n          }\n        }\n        // თუ ვერ ვიპოვეთ შესაფერისი პოზიცია წინ, ვეძებთ უკან\n        if (scrambledIndices[i] === i) {\n          for (let j = i - 1; j >= 0; j--) {\n            if (scrambledIndices[j] !== j) {\n              [scrambledIndices[i], scrambledIndices[j]] = [scrambledIndices[j], scrambledIndices[i]];\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    // ვქმნით საბოლოო არეულ მასივს\n    return scrambledIndices.map((index, i) => ({\n      id: `letter-${i}`,\n      content: originalLetters[index],\n      originalIndex: index\n    }));\n  };\n  const selectRandomAnimal = () => {\n    const randomAnimal = animals[Math.floor(Math.random() * animals.length)];\n    setCurrentAnimal(randomAnimal);\n    setScrambledLetters(scrambleWord(randomAnimal.name));\n    setCorrectPositions([]);\n  };\n  useEffect(() => {\n    selectRandomAnimal();\n  }, []);\n  const handleDragStart = (e, letter, index) => {\n    setDraggedLetter({\n      letter,\n      index\n    });\n    e.target.classList.add('dragging');\n  };\n  const handleDragOver = e => {\n    e.preventDefault();\n    const draggingElement = document.querySelector('.dragging');\n    if (!draggingElement) return;\n    const container = lettersContainerRef.current;\n    const afterElement = getDragAfterElement(container, e.clientX);\n    if (afterElement) {\n      container.insertBefore(draggingElement, afterElement);\n    } else {\n      container.appendChild(draggingElement);\n    }\n  };\n  const getDragAfterElement = (container, x) => {\n    const draggableElements = [...container.querySelectorAll('.letter:not(.dragging)')];\n    return draggableElements.reduce((closest, child) => {\n      const box = child.getBoundingClientRect();\n      const offset = x - box.left - box.width / 2;\n      if (offset < 0 && offset > closest.offset) {\n        return {\n          offset: offset,\n          element: child\n        };\n      } else {\n        return closest;\n      }\n    }, {\n      offset: Number.NEGATIVE_INFINITY\n    }).element;\n  };\n  const handleDragEnd = e => {\n    e.target.classList.remove('dragging');\n    if (!draggedLetter) return;\n    const letters = Array.from(lettersContainerRef.current.children);\n    const newScrambledLetters = letters.map(letterElement => {\n      const id = letterElement.getAttribute('data-id');\n      return scrambledLetters.find(l => l.id === id);\n    });\n    setScrambledLetters(newScrambledLetters);\n\n    // Check correct positions\n    const newCorrectPositions = [];\n    letters.forEach((letterElement, index) => {\n      const id = letterElement.getAttribute('data-id');\n      const letter = scrambledLetters.find(l => l.id === id);\n      if (letter.content === currentAnimal.name[index]) {\n        newCorrectPositions.push(index);\n        letterElement.classList.add('correct');\n      }\n    });\n    setCorrectPositions(newCorrectPositions);\n    setDraggedLetter(null);\n\n    // Check if word is complete\n    if (newCorrectPositions.length === currentAnimal.name.length) {\n      setTimeout(() => {\n        selectRandomAnimal();\n      }, 1500);\n    }\n  };\n  if (!currentAnimal) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"scramble-game\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"game-title\",\n      children: \"\\u10D3\\u10D0\\u10D0\\u10DA\\u10D0\\u10D2\\u10D4 \\u10D0\\u10E1\\u10DD\\u10D4\\u10D1\\u10D8 \\u10E1\\u10EC\\u10DD\\u10E0\\u10D0\\u10D3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"game-instructions\",\n      children: \"\\u10D2\\u10D0\\u10D3\\u10D0\\u10D0\\u10D0\\u10D3\\u10D2\\u10D8\\u10DA\\u10D4 \\u10D0\\u10E1\\u10DD\\u10D4\\u10D1\\u10D8 \\u10E1\\u10EC\\u10DD\\u10E0\\u10D8 \\u10E1\\u10D8\\u10E2\\u10E7\\u10D5\\u10D8\\u10E1 \\u10DB\\u10D8\\u10E1\\u10D0\\u10E6\\u10D4\\u10D1\\u10D0\\u10D3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: `${process.env.PUBLIC_URL}/photos/${currentAnimal.image}`,\n      alt: currentAnimal.name,\n      className: \"animal-image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: lettersContainerRef,\n      className: \"letters-container\",\n      onDragOver: handleDragOver,\n      children: scrambledLetters.map((letter, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        \"data-id\": letter.id,\n        className: `letter ${correctPositions.includes(index) ? 'correct' : ''}`,\n        draggable: !correctPositions.includes(index),\n        onDragStart: e => handleDragStart(e, letter, index),\n        onDragEnd: handleDragEnd,\n        children: letter.content\n      }, letter.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: selectRandomAnimal,\n      className: \"scramble-button\",\n      children: \"\\u10D0\\u10E1\\u10DD\\u10D4\\u10D1\\u10D8\\u10E1 \\u10D0\\u10E0\\u10D4\\u10D5\\u10D0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 170,\n    columnNumber: 5\n  }, this);\n};\n_s(ScrambleGame, \"WFj0DSZTqleO52Ns5W1+LeKiq4Q=\");\n_c = ScrambleGame;\nexport default ScrambleGame;\nvar _c;\n$RefreshReg$(_c, \"ScrambleGame\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","animals","name","image","ScrambleGame","_s","currentAnimal","setCurrentAnimal","scrambledLetters","setScrambledLetters","correctPositions","setCorrectPositions","lettersContainerRef","draggedLetter","setDraggedLetter","scrambleWord","word","originalLetters","split","scrambledIndices","Array","from","length","_","i","currentIndex","j","map","index","id","content","originalIndex","selectRandomAnimal","randomAnimal","Math","floor","random","handleDragStart","e","letter","target","classList","add","handleDragOver","preventDefault","draggingElement","document","querySelector","container","current","afterElement","getDragAfterElement","clientX","insertBefore","appendChild","x","draggableElements","querySelectorAll","reduce","closest","child","box","getBoundingClientRect","offset","left","width","element","Number","NEGATIVE_INFINITY","handleDragEnd","remove","letters","children","newScrambledLetters","letterElement","getAttribute","find","l","newCorrectPositions","forEach","push","setTimeout","className","fileName","_jsxFileName","lineNumber","columnNumber","src","process","env","PUBLIC_URL","alt","ref","onDragOver","includes","draggable","onDragStart","onDragEnd","onClick","_c","$RefreshReg$"],"sources":["C:/Users/osqel/OneDrive/Desktop/New folder/src/components/ScrambleGame.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport '../styles/ScrambleGame.css';\r\n\r\nconst animals = [\r\n  { name: 'ზებრა', image: 'ზებრა.webp' },\r\n  { name: 'სპილო', image: 'სპილო.webp' },\r\n  { name: 'ლომი', image: 'ლომი.webp' },\r\n  { name: 'დათვი', image: 'დათვი.webp' },\r\n  { name: 'მგელი', image: 'მგელო.webp' },\r\n  { name: 'ირემი', image: 'ირემი.webp' },\r\n  { name: 'თხა', image: 'თხა.webp' },\r\n  { name: 'კურდღელი', image: 'კურდღელი.webp' },\r\n  { name: 'ფლამინგო', image: 'ფლამინგო.webp' },\r\n  { name: 'სელაპი', image: 'სელაპი.webp' },\r\n  { name: 'ციყვი', image: 'ციყვი.webp' },\r\n  { name: 'ენოტი', image: 'ენოტი.webp' },\r\n  { name: 'ზარმაცა', image: 'ზარმაცა.webp' },\r\n  { name: 'ზღარბი', image: 'ზღარბი.webp' },\r\n  { name: 'ქამელეონი', image: 'ქამელეონი.webp' },\r\n  { name: 'ოპოსუმი', image: 'ოპოსუმი.webp' },\r\n  { name: 'რვაფეხა', image: 'რვაფეხა.webp' },\r\n  { name: 'თახვი', image: 'თახვი.webp' },\r\n  { name: 'ბეგემოტი', image: 'ბეგემოტი.webp' },\r\n  { name: 'ლამა', image: 'ლამა.webp' },\r\n  { name: 'ჟირაფი', image: 'ჟირაფი.webp' },\r\n  { name: 'კენგურუ', image: 'კენგურუ.webp' },\r\n  { name: 'ბუ', image: 'ბუ.webp' },\r\n  { name: 'პანდა', image: 'პანდა.webp' },\r\n  { name: 'მელია', image: 'მელია.webp' },\r\n  { name: 'დელფინი', image: 'დელფინი.webp' },\r\n  { name: 'კოალა', image: 'კოალა.webp' },\r\n  { name: 'პინგვინი', image: 'პნგვინი.webp' },\r\n  { name: 'კიბორჩხალა', image: 'კიბორჩხალა.webp' },\r\n  { name: 'ობობა', image: 'ობობა.webp' },\r\n  { name: 'გველი', image: 'გველი.webp' },\r\n  { name: 'ხვლიკი', image: 'ხვლიკი.webp' },\r\n  { name: 'ზვიგენი', image: 'ზვიგენი.webp' },\r\n  { name: 'ფარშევანგი', image: 'ფარშევანგი.webp' },\r\n  { name: 'კოდალა', image: 'კოდალა.webp' },\r\n  { name: 'აქლემი', image: 'აქლემი.webp' },\r\n  { name: 'პეპელა', image: 'პეპელა.webp' },\r\n  { name: 'არწივი', image: 'არწივი.webp' }\r\n];\r\n\r\nconst ScrambleGame = () => {\r\n  const [currentAnimal, setCurrentAnimal] = useState(null);\r\n  const [scrambledLetters, setScrambledLetters] = useState([]);\r\n  const [correctPositions, setCorrectPositions] = useState([]);\r\n  const lettersContainerRef = useRef(null);\r\n  const [draggedLetter, setDraggedLetter] = useState(null);\r\n\r\n  const scrambleWord = (word) => {\r\n    const originalLetters = word.split('');\r\n    let scrambledIndices = Array.from({ length: word.length }, (_, i) => i);\r\n    \r\n    // შევქმნათ ისეთი მასივი სადაც არცერთი ინდექსი არ ემთხვევა თავის ორიგინალ პოზიციას\r\n    for (let i = 0; i < word.length; i++) {\r\n      let currentIndex = scrambledIndices[i];\r\n      if (currentIndex === i) {\r\n        // თუ ინდექსი ემთხვევა თავის პოზიციას, ვცვლით სხვა პოზიციასთან\r\n        for (let j = i + 1; j < word.length; j++) {\r\n          if (scrambledIndices[j] !== i) {\r\n            // გავცვალოთ პოზიციები\r\n            [scrambledIndices[i], scrambledIndices[j]] = [scrambledIndices[j], scrambledIndices[i]];\r\n            break;\r\n          }\r\n        }\r\n        // თუ ვერ ვიპოვეთ შესაფერისი პოზიცია წინ, ვეძებთ უკან\r\n        if (scrambledIndices[i] === i) {\r\n          for (let j = i - 1; j >= 0; j--) {\r\n            if (scrambledIndices[j] !== j) {\r\n              [scrambledIndices[i], scrambledIndices[j]] = [scrambledIndices[j], scrambledIndices[i]];\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    // ვქმნით საბოლოო არეულ მასივს\r\n    return scrambledIndices.map((index, i) => ({\r\n      id: `letter-${i}`,\r\n      content: originalLetters[index],\r\n      originalIndex: index\r\n    }));\r\n  };\r\n\r\n  const selectRandomAnimal = () => {\r\n    const randomAnimal = animals[Math.floor(Math.random() * animals.length)];\r\n    setCurrentAnimal(randomAnimal);\r\n    setScrambledLetters(scrambleWord(randomAnimal.name));\r\n    setCorrectPositions([]);\r\n  };\r\n\r\n  useEffect(() => {\r\n    selectRandomAnimal();\r\n  }, []);\r\n\r\n  const handleDragStart = (e, letter, index) => {\r\n    setDraggedLetter({ letter, index });\r\n    e.target.classList.add('dragging');\r\n  };\r\n\r\n  const handleDragOver = (e) => {\r\n    e.preventDefault();\r\n    const draggingElement = document.querySelector('.dragging');\r\n    if (!draggingElement) return;\r\n\r\n    const container = lettersContainerRef.current;\r\n    const afterElement = getDragAfterElement(container, e.clientX);\r\n    if (afterElement) {\r\n      container.insertBefore(draggingElement, afterElement);\r\n    } else {\r\n      container.appendChild(draggingElement);\r\n    }\r\n  };\r\n\r\n  const getDragAfterElement = (container, x) => {\r\n    const draggableElements = [...container.querySelectorAll('.letter:not(.dragging)')];\r\n    \r\n    return draggableElements.reduce((closest, child) => {\r\n      const box = child.getBoundingClientRect();\r\n      const offset = x - box.left - box.width / 2;\r\n      \r\n      if (offset < 0 && offset > closest.offset) {\r\n        return { offset: offset, element: child };\r\n      } else {\r\n        return closest;\r\n      }\r\n    }, { offset: Number.NEGATIVE_INFINITY }).element;\r\n  };\r\n\r\n  const handleDragEnd = (e) => {\r\n    e.target.classList.remove('dragging');\r\n    if (!draggedLetter) return;\r\n\r\n    const letters = Array.from(lettersContainerRef.current.children);\r\n    const newScrambledLetters = letters.map((letterElement) => {\r\n      const id = letterElement.getAttribute('data-id');\r\n      return scrambledLetters.find(l => l.id === id);\r\n    });\r\n\r\n    setScrambledLetters(newScrambledLetters);\r\n\r\n    // Check correct positions\r\n    const newCorrectPositions = [];\r\n    letters.forEach((letterElement, index) => {\r\n      const id = letterElement.getAttribute('data-id');\r\n      const letter = scrambledLetters.find(l => l.id === id);\r\n      if (letter.content === currentAnimal.name[index]) {\r\n        newCorrectPositions.push(index);\r\n        letterElement.classList.add('correct');\r\n      }\r\n    });\r\n\r\n    setCorrectPositions(newCorrectPositions);\r\n    setDraggedLetter(null);\r\n\r\n    // Check if word is complete\r\n    if (newCorrectPositions.length === currentAnimal.name.length) {\r\n      setTimeout(() => {\r\n        selectRandomAnimal();\r\n      }, 1500);\r\n    }\r\n  };\r\n\r\n  if (!currentAnimal) return null;\r\n\r\n  return (\r\n    <div className=\"scramble-game\">\r\n      <h2 className=\"game-title\">დაალაგე ასოები სწორად</h2>\r\n      <p className=\"game-instructions\">\r\n        გადააადგილე ასოები სწორი სიტყვის მისაღებად\r\n      </p>\r\n      \r\n      <img \r\n        src={`${process.env.PUBLIC_URL}/photos/${currentAnimal.image}`} \r\n        alt={currentAnimal.name}\r\n        className=\"animal-image\"\r\n      />\r\n      \r\n      <div \r\n        ref={lettersContainerRef}\r\n        className=\"letters-container\"\r\n        onDragOver={handleDragOver}\r\n      >\r\n        {scrambledLetters.map((letter, index) => (\r\n          <div\r\n            key={letter.id}\r\n            data-id={letter.id}\r\n            className={`letter ${correctPositions.includes(index) ? 'correct' : ''}`}\r\n            draggable={!correctPositions.includes(index)}\r\n            onDragStart={(e) => handleDragStart(e, letter, index)}\r\n            onDragEnd={handleDragEnd}\r\n          >\r\n            {letter.content}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      \r\n      <button onClick={selectRandomAnimal} className=\"scramble-button\">\r\n        ასოების არევა\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ScrambleGame; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}