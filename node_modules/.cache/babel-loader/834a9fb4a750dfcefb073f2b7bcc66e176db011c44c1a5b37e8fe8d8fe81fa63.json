{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\osqel\\\\OneDrive\\\\Desktop\\\\New folder\\\\src\\\\context\\\\PlayerContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlayerContext = /*#__PURE__*/createContext();\nconst initialGameProgress = {\n  puzzles: [],\n  completedScrambleTasks: [],\n  taskScores: {},\n  completedTasks: [],\n  scrambleScores: {},\n  lastPlayed: null\n};\nexport const PlayerProvider = ({\n  children\n}) => {\n  _s();\n  const [gameProgress, setGameProgress] = useState(() => {\n    try {\n      const savedProgress = localStorage.getItem('gameProgress');\n      return savedProgress ? JSON.parse(savedProgress) : initialGameProgress;\n    } catch (error) {\n      console.error('Error loading progress:', error);\n      return initialGameProgress;\n    }\n  });\n\n  // Save progress whenever it changes\n  useEffect(() => {\n    try {\n      localStorage.setItem('gameProgress', JSON.stringify(gameProgress));\n      console.log('Progress saved:', gameProgress);\n    } catch (error) {\n      console.error('Error saving progress:', error);\n    }\n  }, [gameProgress]);\n  const updateGameProgress = async (gameType, timestamp, data) => {\n    return new Promise(resolve => {\n      setGameProgress(prevProgress => {\n        const newProgress = {\n          ...prevProgress\n        };\n        switch (gameType) {\n          case 'puzzle':\n            if (!newProgress.puzzles) newProgress.puzzles = [];\n            if (!newProgress.puzzles.includes(data.puzzleId)) {\n              newProgress.puzzles = [...newProgress.puzzles, data.puzzleId];\n            }\n            break;\n          case 'scramble':\n            if (!newProgress.completedScrambleTasks) newProgress.completedScrambleTasks = [];\n            if (!newProgress.scrambleScores) newProgress.scrambleScores = {};\n            if (!newProgress.completedScrambleTasks.includes(data.taskId)) {\n              newProgress.completedScrambleTasks = [...newProgress.completedScrambleTasks, data.taskId];\n            }\n            if (data.score !== undefined) {\n              newProgress.scrambleScores[data.taskId] = data.score;\n            }\n            break;\n          case 'task':\n            // Initialize arrays if they don't exist\n            if (!newProgress.completedTasks) newProgress.completedTasks = [];\n            if (!newProgress.taskScores) newProgress.taskScores = {};\n\n            // Add task to completed tasks if not already there\n            if (!newProgress.completedTasks.includes(data.taskId)) {\n              newProgress.completedTasks = [...newProgress.completedTasks, data.taskId];\n              console.log('Added task to completed tasks:', data.taskId);\n            }\n\n            // Update task score\n            if (data.score !== undefined) {\n              newProgress.taskScores[data.taskId] = data.score;\n              console.log('Updated task score:', data.taskId, data.score);\n            }\n            break;\n        }\n        newProgress.lastPlayed = timestamp;\n\n        // Log the updated progress\n        console.log('Updated game progress:', newProgress);\n\n        // Save to localStorage immediately\n        try {\n          localStorage.setItem('gameProgress', JSON.stringify(newProgress));\n        } catch (error) {\n          console.error('Failed to save progress to localStorage:', error);\n        }\n        resolve(newProgress);\n        return newProgress;\n      });\n    });\n  };\n  const resetProgress = () => {\n    setGameProgress(initialGameProgress);\n    localStorage.setItem('gameProgress', JSON.stringify(initialGameProgress));\n  };\n  const value = {\n    gameProgress,\n    updateGameProgress,\n    resetProgress\n  };\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n_s(PlayerProvider, \"B/kKPyJHg5/icd4f0HkkckHAUG8=\");\n_c = PlayerProvider;\nexport const usePlayer = () => {\n  _s2();\n  const context = useContext(PlayerContext);\n  if (!context) {\n    throw new Error('usePlayer must be used within a PlayerProvider');\n  }\n  return context;\n};\n_s2(usePlayer, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"PlayerProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","PlayerContext","initialGameProgress","puzzles","completedScrambleTasks","taskScores","completedTasks","scrambleScores","lastPlayed","PlayerProvider","children","_s","gameProgress","setGameProgress","savedProgress","localStorage","getItem","JSON","parse","error","console","setItem","stringify","log","updateGameProgress","gameType","timestamp","data","Promise","resolve","prevProgress","newProgress","includes","puzzleId","taskId","score","undefined","resetProgress","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","usePlayer","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/osqel/OneDrive/Desktop/New folder/src/context/PlayerContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst PlayerContext = createContext();\n\nconst initialGameProgress = {\n  puzzles: [],\n  completedScrambleTasks: [],\n  taskScores: {},\n  completedTasks: [],\n  scrambleScores: {},\n  lastPlayed: null\n};\n\nexport const PlayerProvider = ({ children }) => {\n  const [gameProgress, setGameProgress] = useState(() => {\n    try {\n      const savedProgress = localStorage.getItem('gameProgress');\n      return savedProgress ? JSON.parse(savedProgress) : initialGameProgress;\n    } catch (error) {\n      console.error('Error loading progress:', error);\n      return initialGameProgress;\n    }\n  });\n\n  // Save progress whenever it changes\n  useEffect(() => {\n    try {\n      localStorage.setItem('gameProgress', JSON.stringify(gameProgress));\n      console.log('Progress saved:', gameProgress);\n    } catch (error) {\n      console.error('Error saving progress:', error);\n    }\n  }, [gameProgress]);\n\n  const updateGameProgress = async (gameType, timestamp, data) => {\n    return new Promise((resolve) => {\n      setGameProgress(prevProgress => {\n        const newProgress = { ...prevProgress };\n\n        switch (gameType) {\n          case 'puzzle':\n            if (!newProgress.puzzles) newProgress.puzzles = [];\n            if (!newProgress.puzzles.includes(data.puzzleId)) {\n              newProgress.puzzles = [...newProgress.puzzles, data.puzzleId];\n            }\n            break;\n\n          case 'scramble':\n            if (!newProgress.completedScrambleTasks) newProgress.completedScrambleTasks = [];\n            if (!newProgress.scrambleScores) newProgress.scrambleScores = {};\n            \n            if (!newProgress.completedScrambleTasks.includes(data.taskId)) {\n              newProgress.completedScrambleTasks = [...newProgress.completedScrambleTasks, data.taskId];\n            }\n            if (data.score !== undefined) {\n              newProgress.scrambleScores[data.taskId] = data.score;\n            }\n            break;\n\n          case 'task':\n            // Initialize arrays if they don't exist\n            if (!newProgress.completedTasks) newProgress.completedTasks = [];\n            if (!newProgress.taskScores) newProgress.taskScores = {};\n            \n            // Add task to completed tasks if not already there\n            if (!newProgress.completedTasks.includes(data.taskId)) {\n              newProgress.completedTasks = [...newProgress.completedTasks, data.taskId];\n              console.log('Added task to completed tasks:', data.taskId);\n            }\n            \n            // Update task score\n            if (data.score !== undefined) {\n              newProgress.taskScores[data.taskId] = data.score;\n              console.log('Updated task score:', data.taskId, data.score);\n            }\n            break;\n        }\n\n        newProgress.lastPlayed = timestamp;\n        \n        // Log the updated progress\n        console.log('Updated game progress:', newProgress);\n        \n        // Save to localStorage immediately\n        try {\n          localStorage.setItem('gameProgress', JSON.stringify(newProgress));\n        } catch (error) {\n          console.error('Failed to save progress to localStorage:', error);\n        }\n        \n        resolve(newProgress);\n        return newProgress;\n      });\n    });\n  };\n\n  const resetProgress = () => {\n    setGameProgress(initialGameProgress);\n    localStorage.setItem('gameProgress', JSON.stringify(initialGameProgress));\n  };\n\n  const value = {\n    gameProgress,\n    updateGameProgress,\n    resetProgress\n  };\n\n  return (\n    <PlayerContext.Provider value={value}>\n      {children}\n    </PlayerContext.Provider>\n  );\n};\n\nexport const usePlayer = () => {\n  const context = useContext(PlayerContext);\n  if (!context) {\n    throw new Error('usePlayer must be used within a PlayerProvider');\n  }\n  return context;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}