{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\osqel\\\\OneDrive\\\\Desktop\\\\New folder\\\\src\\\\components\\\\ScrambleGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport '../styles/ScrambleGame.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst animals = [{\n  name: 'ზებრა',\n  image: 'ზებრა.webp'\n}, {\n  name: 'სპილო',\n  image: 'სპილო.webp'\n}, {\n  name: 'ლომი',\n  image: 'ლომი.webp'\n}, {\n  name: 'დათვი',\n  image: 'დათვი.webp'\n}, {\n  name: 'მგელი',\n  image: 'მგელო.webp'\n}, {\n  name: 'ირემი',\n  image: 'ირემი.webp'\n}, {\n  name: 'თხა',\n  image: 'თხა.webp'\n}, {\n  name: 'კურდღელი',\n  image: 'კურდღელი.webp'\n}, {\n  name: 'ფლამინგო',\n  image: 'ფლამინგო.webp'\n}, {\n  name: 'სელაპი',\n  image: 'სელაპი.webp'\n}, {\n  name: 'ციყვი',\n  image: 'ციყვი.webp'\n}, {\n  name: 'ენოტი',\n  image: 'ენოტი.webp'\n}, {\n  name: 'ზარმაცა',\n  image: 'ზარმაცა.webp'\n}, {\n  name: 'ზღარბი',\n  image: 'ზღარბი.webp'\n}, {\n  name: 'ქამელეონი',\n  image: 'ქამელეონი.webp'\n}, {\n  name: 'ოპოსუმი',\n  image: 'ოპოსუმი.webp'\n}, {\n  name: 'რვაფეხა',\n  image: 'რვაფეხა.webp'\n}, {\n  name: 'თახვი',\n  image: 'თახვი.webp'\n}, {\n  name: 'ბეგემოტი',\n  image: 'ბეგემოტი.webp'\n}, {\n  name: 'ლამა',\n  image: 'ლამა.webp'\n}, {\n  name: 'ჟირაფი',\n  image: 'ჟირაფი.webp'\n}, {\n  name: 'კენგურუ',\n  image: 'კენგურუ.webp'\n}, {\n  name: 'ბუ',\n  image: 'ბუ.webp'\n}, {\n  name: 'პანდა',\n  image: 'პანდა.webp'\n}, {\n  name: 'მელია',\n  image: 'მელია.webp'\n}, {\n  name: 'დელფინი',\n  image: 'დელფინი.webp'\n}, {\n  name: 'კოალა',\n  image: 'კოალა.webp'\n}, {\n  name: 'პინგვინი',\n  image: 'პნგვინი.webp'\n}, {\n  name: 'კიბორჩხალა',\n  image: 'კიბორჩხალა.webp'\n}, {\n  name: 'ობობა',\n  image: 'ობობა.webp'\n}, {\n  name: 'გველი',\n  image: 'გველი.webp'\n}, {\n  name: 'ხვლიკი',\n  image: 'ხვლიკი.webp'\n}, {\n  name: 'ზვიგენი',\n  image: 'ზვიგენი.webp'\n}, {\n  name: 'ფარშევანგი',\n  image: 'ფარშევანგი.webp'\n}, {\n  name: 'კოდალა',\n  image: 'კოდალა.webp'\n}, {\n  name: 'აქლემი',\n  image: 'აქლემი.webp'\n}, {\n  name: 'პეპელა',\n  image: 'პეპელა.webp'\n}, {\n  name: 'არწივი',\n  image: 'არწივი.webp'\n}];\nconst scrambleWord = word => {\n  const originalLetters = word.split('');\n  let scrambledIndices = Array.from({\n    length: word.length\n  }, (_, i) => i);\n  for (let i = 0; i < word.length; i++) {\n    let currentIndex = scrambledIndices[i];\n    if (currentIndex === i) {\n      for (let j = i + 1; j < word.length; j++) {\n        if (scrambledIndices[j] !== i) {\n          [scrambledIndices[i], scrambledIndices[j]] = [scrambledIndices[j], scrambledIndices[i]];\n          break;\n        }\n      }\n      if (scrambledIndices[i] === i) {\n        for (let j = i - 1; j >= 0; j--) {\n          if (scrambledIndices[j] !== j) {\n            [scrambledIndices[i], scrambledIndices[j]] = [scrambledIndices[j], scrambledIndices[i]];\n            break;\n          }\n        }\n      }\n    }\n  }\n  return scrambledIndices.map((index, i) => ({\n    id: `letter-${i}`,\n    content: originalLetters[index],\n    originalIndex: index\n  }));\n};\nconst ScrambleGame = () => {\n  _s();\n  const [currentAnimal, setCurrentAnimal] = useState(() => {\n    const saved = localStorage.getItem('completedAnimals');\n    const savedAnimals = saved ? JSON.parse(saved) : [];\n    const availableAnimals = animals.filter(animal => !savedAnimals.includes(animal.name));\n    return availableAnimals.length > 0 ? availableAnimals[Math.floor(Math.random() * availableAnimals.length)] : animals[Math.floor(Math.random() * animals.length)];\n  });\n  const [scrambledLetters, setScrambledLetters] = useState(() => currentAnimal ? scrambleWord(currentAnimal.name) : []);\n  const [placedLetters, setPlacedLetters] = useState(() => currentAnimal ? Array(currentAnimal.name.length).fill(null) : []);\n  const [correctPositions, setCorrectPositions] = useState([]);\n  const [wrongPosition, setWrongPosition] = useState(null);\n  const [showGame, setShowGame] = useState(false);\n  const [completedAnimals, setCompletedAnimals] = useState(() => {\n    const saved = localStorage.getItem('completedAnimals');\n    return saved ? JSON.parse(saved) : [];\n  });\n  const lettersContainerRef = useRef(null);\n  const targetContainerRef = useRef(null);\n  const [draggedLetter, setDraggedLetter] = useState(null);\n  useEffect(() => {\n    localStorage.setItem('completedAnimals', JSON.stringify(completedAnimals));\n  }, [completedAnimals]);\n  const selectRandomAnimal = () => {\n    const availableAnimals = animals.filter(animal => !completedAnimals.includes(animal.name));\n    if (availableAnimals.length === 0) {\n      window.alert('გილოცავთ! თქვენ ყველა ამოცანა შეასრულეთ! 🎉');\n      localStorage.removeItem('completedAnimals');\n      setCompletedAnimals([]);\n      const randomAnimal = animals[Math.floor(Math.random() * animals.length)];\n      initializeAnimal(randomAnimal);\n      setShowGame(true);\n      return;\n    }\n    const randomIndex = Math.floor(Math.random() * availableAnimals.length);\n    const randomAnimal = availableAnimals[randomIndex];\n    initializeAnimal(randomAnimal);\n    setShowGame(true);\n  };\n  const initializeAnimal = animal => {\n    setCurrentAnimal(animal);\n    setScrambledLetters(scrambleWord(animal.name));\n    setPlacedLetters(Array(animal.name.length).fill(null));\n    setCorrectPositions([]);\n  };\n  const handleDragStart = (e, letter, index) => {\n    setDraggedLetter({\n      letter,\n      index\n    });\n    e.target.classList.add('dragging');\n  };\n  const handleDragOver = e => {\n    e.preventDefault();\n  };\n  const handleDrop = (e, targetIndex) => {\n    e.preventDefault();\n    if (!draggedLetter) return;\n    if (draggedLetter.letter.content !== currentAnimal.name[targetIndex]) {\n      setWrongPosition(targetIndex);\n      setTimeout(() => {\n        setWrongPosition(null);\n      }, 500);\n      return;\n    }\n    const newPlacedLetters = [...placedLetters];\n    const newScrambledLetters = [...scrambledLetters];\n    newPlacedLetters[targetIndex] = draggedLetter.letter;\n    newScrambledLetters.splice(draggedLetter.index, 1);\n    setPlacedLetters(newPlacedLetters);\n    setScrambledLetters(newScrambledLetters);\n    const newCorrectPositions = [];\n    newPlacedLetters.forEach((letter, index) => {\n      if (letter && letter.content === currentAnimal.name[index]) {\n        newCorrectPositions.push(index);\n      }\n    });\n    setCorrectPositions(newCorrectPositions);\n    if (newCorrectPositions.length === currentAnimal.name.length) {\n      const newCompletedAnimals = [...completedAnimals, currentAnimal.name];\n      setCompletedAnimals(newCompletedAnimals);\n      localStorage.setItem('completedAnimals', JSON.stringify(newCompletedAnimals));\n      if (newCompletedAnimals.length === animals.length) {\n        window.alert('გილოცავთ! თქვენ ყველა ამოცანა შეასრულეთ! 🎉');\n        localStorage.removeItem('completedAnimals');\n        setCompletedAnimals([]);\n        const randomAnimal = animals[Math.floor(Math.random() * animals.length)];\n        initializeAnimal(randomAnimal);\n      } else {\n        const availableAnimals = animals.filter(animal => !newCompletedAnimals.includes(animal.name));\n        const randomIndex = Math.floor(Math.random() * availableAnimals.length);\n        const randomAnimal = availableAnimals[randomIndex];\n        initializeAnimal(randomAnimal);\n      }\n    }\n  };\n  const startNewGame = () => {\n    const availableAnimals = animals.filter(animal => !completedAnimals.includes(animal.name));\n    if (availableAnimals.length === 0) {\n      window.alert('გილოცავთ! თქვენ ყველა ამოცანა შეასრულეთ! 🎉');\n      return;\n    }\n    const randomIndex = Math.floor(Math.random() * availableAnimals.length);\n    const randomAnimal = availableAnimals[randomIndex];\n    initializeAnimal(randomAnimal);\n    setShowGame(true);\n  };\n  const handleReset = () => {\n    window.alert('თამაში იწყება თავიდან! 🎮');\n    localStorage.removeItem('completedAnimals');\n    setCompletedAnimals([]);\n    const randomAnimal = animals[Math.floor(Math.random() * animals.length)];\n    initializeAnimal(randomAnimal);\n    setShowGame(true);\n  };\n  useEffect(() => {\n    const initializeGame = () => {\n      const saved = localStorage.getItem('completedAnimals');\n      const savedAnimals = saved ? JSON.parse(saved) : [];\n      setCompletedAnimals(savedAnimals);\n      const availableAnimals = animals.filter(animal => !savedAnimals.includes(animal.name));\n      if (availableAnimals.length === 0) {\n        setShowGame(false);\n        return;\n      }\n      const randomAnimal = availableAnimals[Math.floor(Math.random() * availableAnimals.length)];\n      initializeAnimal(randomAnimal);\n      setShowGame(true);\n    };\n    initializeGame();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"scramble-game\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"game-title\",\n      children: \"\\u10D3\\u10D0\\u10D0\\u10DA\\u10D0\\u10D2\\u10D4 \\u10D0\\u10E1\\u10DD\\u10D4\\u10D1\\u10D8 \\u10E1\\u10EC\\u10DD\\u10E0\\u10D0\\u10D3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"game-instructions\",\n      children: \"\\u10D2\\u10D0\\u10D3\\u10DB\\u10DD\\u10D8\\u10E2\\u10D0\\u10DC\\u10D4 \\u10D0\\u10E1\\u10DD\\u10D4\\u10D1\\u10D8 \\u10D3\\u10D0 \\u10E9\\u10D0\\u10E1\\u10D5\\u10D8 \\u10E1\\u10EC\\u10DD\\u10E0 \\u10D0\\u10D3\\u10D2\\u10D8\\u10DA\\u10D0\\u10E1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this), currentAnimal && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: `${process.env.PUBLIC_URL}/photos/${currentAnimal.image}`,\n        alt: currentAnimal.name,\n        className: \"animal-image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: targetContainerRef,\n        className: \"target-container\",\n        children: placedLetters.map((letter, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `letter-slot ${correctPositions.includes(index) ? 'correct' : ''} \n                          ${letter ? 'filled' : ''} \n                          ${wrongPosition === index ? 'wrong' : ''}`,\n          onDragOver: handleDragOver,\n          onDrop: e => handleDrop(e, index),\n          children: letter && letter.content\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: lettersContainerRef,\n        className: \"letters-container\",\n        children: scrambledLetters.map((letter, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          \"data-id\": letter.id,\n          className: \"letter\",\n          draggable: true,\n          onDragStart: e => handleDragStart(e, letter, index),\n          children: letter.content\n        }, letter.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 235,\n    columnNumber: 5\n  }, this);\n};\n_s(ScrambleGame, \"ooIhzhWoVYuvvh3Go342UXnrRZ4=\");\n_c = ScrambleGame;\nexport default ScrambleGame;\nvar _c;\n$RefreshReg$(_c, \"ScrambleGame\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","Fragment","_Fragment","animals","name","image","scrambleWord","word","originalLetters","split","scrambledIndices","Array","from","length","_","i","currentIndex","j","map","index","id","content","originalIndex","ScrambleGame","_s","currentAnimal","setCurrentAnimal","saved","localStorage","getItem","savedAnimals","JSON","parse","availableAnimals","filter","animal","includes","Math","floor","random","scrambledLetters","setScrambledLetters","placedLetters","setPlacedLetters","fill","correctPositions","setCorrectPositions","wrongPosition","setWrongPosition","showGame","setShowGame","completedAnimals","setCompletedAnimals","lettersContainerRef","targetContainerRef","draggedLetter","setDraggedLetter","setItem","stringify","selectRandomAnimal","window","alert","removeItem","randomAnimal","initializeAnimal","randomIndex","handleDragStart","e","letter","target","classList","add","handleDragOver","preventDefault","handleDrop","targetIndex","setTimeout","newPlacedLetters","newScrambledLetters","splice","newCorrectPositions","forEach","push","newCompletedAnimals","startNewGame","handleReset","initializeGame","className","children","fileName","_jsxFileName","lineNumber","columnNumber","src","process","env","PUBLIC_URL","alt","ref","onDragOver","onDrop","draggable","onDragStart","_c","$RefreshReg$"],"sources":["C:/Users/osqel/OneDrive/Desktop/New folder/src/components/ScrambleGame.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport '../styles/ScrambleGame.css';\r\n\r\nconst animals = [\r\n  { name: 'ზებრა', image: 'ზებრა.webp' },\r\n  { name: 'სპილო', image: 'სპილო.webp' },\r\n  { name: 'ლომი', image: 'ლომი.webp' },\r\n  { name: 'დათვი', image: 'დათვი.webp' },\r\n  { name: 'მგელი', image: 'მგელო.webp' },\r\n  { name: 'ირემი', image: 'ირემი.webp' },\r\n  { name: 'თხა', image: 'თხა.webp' },\r\n  { name: 'კურდღელი', image: 'კურდღელი.webp' },\r\n  { name: 'ფლამინგო', image: 'ფლამინგო.webp' },\r\n  { name: 'სელაპი', image: 'სელაპი.webp' },\r\n  { name: 'ციყვი', image: 'ციყვი.webp' },\r\n  { name: 'ენოტი', image: 'ენოტი.webp' },\r\n  { name: 'ზარმაცა', image: 'ზარმაცა.webp' },\r\n  { name: 'ზღარბი', image: 'ზღარბი.webp' },\r\n  { name: 'ქამელეონი', image: 'ქამელეონი.webp' },\r\n  { name: 'ოპოსუმი', image: 'ოპოსუმი.webp' },\r\n  { name: 'რვაფეხა', image: 'რვაფეხა.webp' },\r\n  { name: 'თახვი', image: 'თახვი.webp' },\r\n  { name: 'ბეგემოტი', image: 'ბეგემოტი.webp' },\r\n  { name: 'ლამა', image: 'ლამა.webp' },\r\n  { name: 'ჟირაფი', image: 'ჟირაფი.webp' },\r\n  { name: 'კენგურუ', image: 'კენგურუ.webp' },\r\n  { name: 'ბუ', image: 'ბუ.webp' },\r\n  { name: 'პანდა', image: 'პანდა.webp' },\r\n  { name: 'მელია', image: 'მელია.webp' },\r\n  { name: 'დელფინი', image: 'დელფინი.webp' },\r\n  { name: 'კოალა', image: 'კოალა.webp' },\r\n  { name: 'პინგვინი', image: 'პნგვინი.webp' },\r\n  { name: 'კიბორჩხალა', image: 'კიბორჩხალა.webp' },\r\n  { name: 'ობობა', image: 'ობობა.webp' },\r\n  { name: 'გველი', image: 'გველი.webp' },\r\n  { name: 'ხვლიკი', image: 'ხვლიკი.webp' },\r\n  { name: 'ზვიგენი', image: 'ზვიგენი.webp' },\r\n  { name: 'ფარშევანგი', image: 'ფარშევანგი.webp' },\r\n  { name: 'კოდალა', image: 'კოდალა.webp' },\r\n  { name: 'აქლემი', image: 'აქლემი.webp' },\r\n  { name: 'პეპელა', image: 'პეპელა.webp' },\r\n  { name: 'არწივი', image: 'არწივი.webp' }\r\n];\r\n\r\nconst scrambleWord = (word) => {\r\n  const originalLetters = word.split('');\r\n  let scrambledIndices = Array.from({ length: word.length }, (_, i) => i);\r\n  \r\n  for (let i = 0; i < word.length; i++) {\r\n    let currentIndex = scrambledIndices[i];\r\n    if (currentIndex === i) {\r\n      for (let j = i + 1; j < word.length; j++) {\r\n        if (scrambledIndices[j] !== i) {\r\n          [scrambledIndices[i], scrambledIndices[j]] = [scrambledIndices[j], scrambledIndices[i]];\r\n          break;\r\n        }\r\n      }\r\n      if (scrambledIndices[i] === i) {\r\n        for (let j = i - 1; j >= 0; j--) {\r\n          if (scrambledIndices[j] !== j) {\r\n            [scrambledIndices[i], scrambledIndices[j]] = [scrambledIndices[j], scrambledIndices[i]];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  \r\n  return scrambledIndices.map((index, i) => ({\r\n    id: `letter-${i}`,\r\n    content: originalLetters[index],\r\n    originalIndex: index\r\n  }));\r\n};\r\n\r\nconst ScrambleGame = () => {\r\n  const [currentAnimal, setCurrentAnimal] = useState(() => {\r\n    const saved = localStorage.getItem('completedAnimals');\r\n    const savedAnimals = saved ? JSON.parse(saved) : [];\r\n    const availableAnimals = animals.filter(animal => !savedAnimals.includes(animal.name));\r\n    return availableAnimals.length > 0 \r\n      ? availableAnimals[Math.floor(Math.random() * availableAnimals.length)]\r\n      : animals[Math.floor(Math.random() * animals.length)];\r\n  });\r\n  const [scrambledLetters, setScrambledLetters] = useState(() => \r\n    currentAnimal ? scrambleWord(currentAnimal.name) : []\r\n  );\r\n  const [placedLetters, setPlacedLetters] = useState(() => \r\n    currentAnimal ? Array(currentAnimal.name.length).fill(null) : []\r\n  );\r\n  const [correctPositions, setCorrectPositions] = useState([]);\r\n  const [wrongPosition, setWrongPosition] = useState(null);\r\n  const [showGame, setShowGame] = useState(false);\r\n  const [completedAnimals, setCompletedAnimals] = useState(() => {\r\n    const saved = localStorage.getItem('completedAnimals');\r\n    return saved ? JSON.parse(saved) : [];\r\n  });\r\n  const lettersContainerRef = useRef(null);\r\n  const targetContainerRef = useRef(null);\r\n  const [draggedLetter, setDraggedLetter] = useState(null);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('completedAnimals', JSON.stringify(completedAnimals));\r\n  }, [completedAnimals]);\r\n\r\n  const selectRandomAnimal = () => {\r\n    const availableAnimals = animals.filter(animal => !completedAnimals.includes(animal.name));\r\n    \r\n    if (availableAnimals.length === 0) {\r\n      window.alert('გილოცავთ! თქვენ ყველა ამოცანა შეასრულეთ! 🎉');\r\n      localStorage.removeItem('completedAnimals');\r\n      setCompletedAnimals([]);\r\n      const randomAnimal = animals[Math.floor(Math.random() * animals.length)];\r\n      initializeAnimal(randomAnimal);\r\n      setShowGame(true);\r\n      return;\r\n    }\r\n    \r\n    const randomIndex = Math.floor(Math.random() * availableAnimals.length);\r\n    const randomAnimal = availableAnimals[randomIndex];\r\n    initializeAnimal(randomAnimal);\r\n    setShowGame(true);\r\n  };\r\n\r\n  const initializeAnimal = (animal) => {\r\n    setCurrentAnimal(animal);\r\n    setScrambledLetters(scrambleWord(animal.name));\r\n    setPlacedLetters(Array(animal.name.length).fill(null));\r\n    setCorrectPositions([]);\r\n  };\r\n\r\n  const handleDragStart = (e, letter, index) => {\r\n    setDraggedLetter({ letter, index });\r\n    e.target.classList.add('dragging');\r\n  };\r\n\r\n  const handleDragOver = (e) => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  const handleDrop = (e, targetIndex) => {\r\n    e.preventDefault();\r\n    if (!draggedLetter) return;\r\n\r\n    if (draggedLetter.letter.content !== currentAnimal.name[targetIndex]) {\r\n      setWrongPosition(targetIndex);\r\n      setTimeout(() => {\r\n        setWrongPosition(null);\r\n      }, 500);\r\n      return;\r\n    }\r\n\r\n    const newPlacedLetters = [...placedLetters];\r\n    const newScrambledLetters = [...scrambledLetters];\r\n\r\n    newPlacedLetters[targetIndex] = draggedLetter.letter;\r\n    newScrambledLetters.splice(draggedLetter.index, 1);\r\n\r\n    setPlacedLetters(newPlacedLetters);\r\n    setScrambledLetters(newScrambledLetters);\r\n\r\n    const newCorrectPositions = [];\r\n    newPlacedLetters.forEach((letter, index) => {\r\n      if (letter && letter.content === currentAnimal.name[index]) {\r\n        newCorrectPositions.push(index);\r\n      }\r\n    });\r\n\r\n    setCorrectPositions(newCorrectPositions);\r\n\r\n    if (newCorrectPositions.length === currentAnimal.name.length) {\r\n      const newCompletedAnimals = [...completedAnimals, currentAnimal.name];\r\n      setCompletedAnimals(newCompletedAnimals);\r\n      localStorage.setItem('completedAnimals', JSON.stringify(newCompletedAnimals));\r\n      \r\n      if (newCompletedAnimals.length === animals.length) {\r\n        window.alert('გილოცავთ! თქვენ ყველა ამოცანა შეასრულეთ! 🎉');\r\n        localStorage.removeItem('completedAnimals');\r\n        setCompletedAnimals([]);\r\n        const randomAnimal = animals[Math.floor(Math.random() * animals.length)];\r\n        initializeAnimal(randomAnimal);\r\n      } else {\r\n        const availableAnimals = animals.filter(animal => !newCompletedAnimals.includes(animal.name));\r\n        const randomIndex = Math.floor(Math.random() * availableAnimals.length);\r\n        const randomAnimal = availableAnimals[randomIndex];\r\n        initializeAnimal(randomAnimal);\r\n      }\r\n    }\r\n  };\r\n\r\n  const startNewGame = () => {\r\n    const availableAnimals = animals.filter(animal => !completedAnimals.includes(animal.name));\r\n    \r\n    if (availableAnimals.length === 0) {\r\n      window.alert('გილოცავთ! თქვენ ყველა ამოცანა შეასრულეთ! 🎉');\r\n      return;\r\n    }\r\n    \r\n    const randomIndex = Math.floor(Math.random() * availableAnimals.length);\r\n    const randomAnimal = availableAnimals[randomIndex];\r\n    initializeAnimal(randomAnimal);\r\n    setShowGame(true);\r\n  };\r\n\r\n  const handleReset = () => {\r\n    window.alert('თამაში იწყება თავიდან! 🎮');\r\n    localStorage.removeItem('completedAnimals');\r\n    setCompletedAnimals([]);\r\n    const randomAnimal = animals[Math.floor(Math.random() * animals.length)];\r\n    initializeAnimal(randomAnimal);\r\n    setShowGame(true);\r\n  };\r\n\r\n  useEffect(() => {\r\n    const initializeGame = () => {\r\n      const saved = localStorage.getItem('completedAnimals');\r\n      const savedAnimals = saved ? JSON.parse(saved) : [];\r\n      setCompletedAnimals(savedAnimals);\r\n      \r\n      const availableAnimals = animals.filter(animal => !savedAnimals.includes(animal.name));\r\n      if (availableAnimals.length === 0) {\r\n        setShowGame(false);\r\n        return;\r\n      }\r\n      \r\n      const randomAnimal = availableAnimals[Math.floor(Math.random() * availableAnimals.length)];\r\n      initializeAnimal(randomAnimal);\r\n      setShowGame(true);\r\n    };\r\n\r\n    initializeGame();\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"scramble-game\">\r\n      <h2 className=\"game-title\">დაალაგე ასოები სწორად</h2>\r\n      <p className=\"game-instructions\">\r\n        გადმოიტანე ასოები და ჩასვი სწორ ადგილას\r\n      </p>\r\n      \r\n      {currentAnimal && (\r\n        <>\r\n          <img \r\n            src={`${process.env.PUBLIC_URL}/photos/${currentAnimal.image}`} \r\n            alt={currentAnimal.name}\r\n            className=\"animal-image\"\r\n          />\r\n          \r\n          <div \r\n            ref={targetContainerRef}\r\n            className=\"target-container\"\r\n          >\r\n            {placedLetters.map((letter, index) => (\r\n              <div\r\n                key={index}\r\n                className={`letter-slot ${correctPositions.includes(index) ? 'correct' : ''} \r\n                          ${letter ? 'filled' : ''} \r\n                          ${wrongPosition === index ? 'wrong' : ''}`}\r\n                onDragOver={handleDragOver}\r\n                onDrop={(e) => handleDrop(e, index)}\r\n              >\r\n                {letter && letter.content}\r\n              </div>\r\n            ))}\r\n          </div>\r\n\r\n          <div \r\n            ref={lettersContainerRef}\r\n            className=\"letters-container\"\r\n          >\r\n            {scrambledLetters.map((letter, index) => (\r\n              <div\r\n                key={letter.id}\r\n                data-id={letter.id}\r\n                className=\"letter\"\r\n                draggable={true}\r\n                onDragStart={(e) => handleDragStart(e, letter, index)}\r\n              >\r\n                {letter.content}\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ScrambleGame; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAO,4BAA4B;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEpC,MAAMC,OAAO,GAAG,CACd;EAAEC,IAAI,EAAE,OAAO;EAAEC,KAAK,EAAE;AAAa,CAAC,EACtC;EAAED,IAAI,EAAE,OAAO;EAAEC,KAAK,EAAE;AAAa,CAAC,EACtC;EAAED,IAAI,EAAE,MAAM;EAAEC,KAAK,EAAE;AAAY,CAAC,EACpC;EAAED,IAAI,EAAE,OAAO;EAAEC,KAAK,EAAE;AAAa,CAAC,EACtC;EAAED,IAAI,EAAE,OAAO;EAAEC,KAAK,EAAE;AAAa,CAAC,EACtC;EAAED,IAAI,EAAE,OAAO;EAAEC,KAAK,EAAE;AAAa,CAAC,EACtC;EAAED,IAAI,EAAE,KAAK;EAAEC,KAAK,EAAE;AAAW,CAAC,EAClC;EAAED,IAAI,EAAE,UAAU;EAAEC,KAAK,EAAE;AAAgB,CAAC,EAC5C;EAAED,IAAI,EAAE,UAAU;EAAEC,KAAK,EAAE;AAAgB,CAAC,EAC5C;EAAED,IAAI,EAAE,QAAQ;EAAEC,KAAK,EAAE;AAAc,CAAC,EACxC;EAAED,IAAI,EAAE,OAAO;EAAEC,KAAK,EAAE;AAAa,CAAC,EACtC;EAAED,IAAI,EAAE,OAAO;EAAEC,KAAK,EAAE;AAAa,CAAC,EACtC;EAAED,IAAI,EAAE,SAAS;EAAEC,KAAK,EAAE;AAAe,CAAC,EAC1C;EAAED,IAAI,EAAE,QAAQ;EAAEC,KAAK,EAAE;AAAc,CAAC,EACxC;EAAED,IAAI,EAAE,WAAW;EAAEC,KAAK,EAAE;AAAiB,CAAC,EAC9C;EAAED,IAAI,EAAE,SAAS;EAAEC,KAAK,EAAE;AAAe,CAAC,EAC1C;EAAED,IAAI,EAAE,SAAS;EAAEC,KAAK,EAAE;AAAe,CAAC,EAC1C;EAAED,IAAI,EAAE,OAAO;EAAEC,KAAK,EAAE;AAAa,CAAC,EACtC;EAAED,IAAI,EAAE,UAAU;EAAEC,KAAK,EAAE;AAAgB,CAAC,EAC5C;EAAED,IAAI,EAAE,MAAM;EAAEC,KAAK,EAAE;AAAY,CAAC,EACpC;EAAED,IAAI,EAAE,QAAQ;EAAEC,KAAK,EAAE;AAAc,CAAC,EACxC;EAAED,IAAI,EAAE,SAAS;EAAEC,KAAK,EAAE;AAAe,CAAC,EAC1C;EAAED,IAAI,EAAE,IAAI;EAAEC,KAAK,EAAE;AAAU,CAAC,EAChC;EAAED,IAAI,EAAE,OAAO;EAAEC,KAAK,EAAE;AAAa,CAAC,EACtC;EAAED,IAAI,EAAE,OAAO;EAAEC,KAAK,EAAE;AAAa,CAAC,EACtC;EAAED,IAAI,EAAE,SAAS;EAAEC,KAAK,EAAE;AAAe,CAAC,EAC1C;EAAED,IAAI,EAAE,OAAO;EAAEC,KAAK,EAAE;AAAa,CAAC,EACtC;EAAED,IAAI,EAAE,UAAU;EAAEC,KAAK,EAAE;AAAe,CAAC,EAC3C;EAAED,IAAI,EAAE,YAAY;EAAEC,KAAK,EAAE;AAAkB,CAAC,EAChD;EAAED,IAAI,EAAE,OAAO;EAAEC,KAAK,EAAE;AAAa,CAAC,EACtC;EAAED,IAAI,EAAE,OAAO;EAAEC,KAAK,EAAE;AAAa,CAAC,EACtC;EAAED,IAAI,EAAE,QAAQ;EAAEC,KAAK,EAAE;AAAc,CAAC,EACxC;EAAED,IAAI,EAAE,SAAS;EAAEC,KAAK,EAAE;AAAe,CAAC,EAC1C;EAAED,IAAI,EAAE,YAAY;EAAEC,KAAK,EAAE;AAAkB,CAAC,EAChD;EAAED,IAAI,EAAE,QAAQ;EAAEC,KAAK,EAAE;AAAc,CAAC,EACxC;EAAED,IAAI,EAAE,QAAQ;EAAEC,KAAK,EAAE;AAAc,CAAC,EACxC;EAAED,IAAI,EAAE,QAAQ;EAAEC,KAAK,EAAE;AAAc,CAAC,EACxC;EAAED,IAAI,EAAE,QAAQ;EAAEC,KAAK,EAAE;AAAc,CAAC,CACzC;AAED,MAAMC,YAAY,GAAIC,IAAI,IAAK;EAC7B,MAAMC,eAAe,GAAGD,IAAI,CAACE,KAAK,CAAC,EAAE,CAAC;EACtC,IAAIC,gBAAgB,GAAGC,KAAK,CAACC,IAAI,CAAC;IAAEC,MAAM,EAAEN,IAAI,CAACM;EAAO,CAAC,EAAE,CAACC,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAAC;EAEvE,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,IAAI,CAACM,MAAM,EAAEE,CAAC,EAAE,EAAE;IACpC,IAAIC,YAAY,GAAGN,gBAAgB,CAACK,CAAC,CAAC;IACtC,IAAIC,YAAY,KAAKD,CAAC,EAAE;MACtB,KAAK,IAAIE,CAAC,GAAGF,CAAC,GAAG,CAAC,EAAEE,CAAC,GAAGV,IAAI,CAACM,MAAM,EAAEI,CAAC,EAAE,EAAE;QACxC,IAAIP,gBAAgB,CAACO,CAAC,CAAC,KAAKF,CAAC,EAAE;UAC7B,CAACL,gBAAgB,CAACK,CAAC,CAAC,EAAEL,gBAAgB,CAACO,CAAC,CAAC,CAAC,GAAG,CAACP,gBAAgB,CAACO,CAAC,CAAC,EAAEP,gBAAgB,CAACK,CAAC,CAAC,CAAC;UACvF;QACF;MACF;MACA,IAAIL,gBAAgB,CAACK,CAAC,CAAC,KAAKA,CAAC,EAAE;QAC7B,KAAK,IAAIE,CAAC,GAAGF,CAAC,GAAG,CAAC,EAAEE,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;UAC/B,IAAIP,gBAAgB,CAACO,CAAC,CAAC,KAAKA,CAAC,EAAE;YAC7B,CAACP,gBAAgB,CAACK,CAAC,CAAC,EAAEL,gBAAgB,CAACO,CAAC,CAAC,CAAC,GAAG,CAACP,gBAAgB,CAACO,CAAC,CAAC,EAAEP,gBAAgB,CAACK,CAAC,CAAC,CAAC;YACvF;UACF;QACF;MACF;IACF;EACF;EAEA,OAAOL,gBAAgB,CAACQ,GAAG,CAAC,CAACC,KAAK,EAAEJ,CAAC,MAAM;IACzCK,EAAE,EAAE,UAAUL,CAAC,EAAE;IACjBM,OAAO,EAAEb,eAAe,CAACW,KAAK,CAAC;IAC/BG,aAAa,EAAEH;EACjB,CAAC,CAAC,CAAC;AACL,CAAC;AAED,MAAMI,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAG9B,QAAQ,CAAC,MAAM;IACvD,MAAM+B,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,kBAAkB,CAAC;IACtD,MAAMC,YAAY,GAAGH,KAAK,GAAGI,IAAI,CAACC,KAAK,CAACL,KAAK,CAAC,GAAG,EAAE;IACnD,MAAMM,gBAAgB,GAAG9B,OAAO,CAAC+B,MAAM,CAACC,MAAM,IAAI,CAACL,YAAY,CAACM,QAAQ,CAACD,MAAM,CAAC/B,IAAI,CAAC,CAAC;IACtF,OAAO6B,gBAAgB,CAACpB,MAAM,GAAG,CAAC,GAC9BoB,gBAAgB,CAACI,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGN,gBAAgB,CAACpB,MAAM,CAAC,CAAC,GACrEV,OAAO,CAACkC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGpC,OAAO,CAACU,MAAM,CAAC,CAAC;EACzD,CAAC,CAAC;EACF,MAAM,CAAC2B,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG7C,QAAQ,CAAC,MACvD6B,aAAa,GAAGnB,YAAY,CAACmB,aAAa,CAACrB,IAAI,CAAC,GAAG,EACrD,CAAC;EACD,MAAM,CAACsC,aAAa,EAAEC,gBAAgB,CAAC,GAAG/C,QAAQ,CAAC,MACjD6B,aAAa,GAAGd,KAAK,CAACc,aAAa,CAACrB,IAAI,CAACS,MAAM,CAAC,CAAC+B,IAAI,CAAC,IAAI,CAAC,GAAG,EAChE,CAAC;EACD,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGlD,QAAQ,CAAC,EAAE,CAAC;EAC5D,MAAM,CAACmD,aAAa,EAAEC,gBAAgB,CAAC,GAAGpD,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACqD,QAAQ,EAAEC,WAAW,CAAC,GAAGtD,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACuD,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGxD,QAAQ,CAAC,MAAM;IAC7D,MAAM+B,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,kBAAkB,CAAC;IACtD,OAAOF,KAAK,GAAGI,IAAI,CAACC,KAAK,CAACL,KAAK,CAAC,GAAG,EAAE;EACvC,CAAC,CAAC;EACF,MAAM0B,mBAAmB,GAAGvD,MAAM,CAAC,IAAI,CAAC;EACxC,MAAMwD,kBAAkB,GAAGxD,MAAM,CAAC,IAAI,CAAC;EACvC,MAAM,CAACyD,aAAa,EAAEC,gBAAgB,CAAC,GAAG5D,QAAQ,CAAC,IAAI,CAAC;EAExDC,SAAS,CAAC,MAAM;IACd+B,YAAY,CAAC6B,OAAO,CAAC,kBAAkB,EAAE1B,IAAI,CAAC2B,SAAS,CAACP,gBAAgB,CAAC,CAAC;EAC5E,CAAC,EAAE,CAACA,gBAAgB,CAAC,CAAC;EAEtB,MAAMQ,kBAAkB,GAAGA,CAAA,KAAM;IAC/B,MAAM1B,gBAAgB,GAAG9B,OAAO,CAAC+B,MAAM,CAACC,MAAM,IAAI,CAACgB,gBAAgB,CAACf,QAAQ,CAACD,MAAM,CAAC/B,IAAI,CAAC,CAAC;IAE1F,IAAI6B,gBAAgB,CAACpB,MAAM,KAAK,CAAC,EAAE;MACjC+C,MAAM,CAACC,KAAK,CAAC,6CAA6C,CAAC;MAC3DjC,YAAY,CAACkC,UAAU,CAAC,kBAAkB,CAAC;MAC3CV,mBAAmB,CAAC,EAAE,CAAC;MACvB,MAAMW,YAAY,GAAG5D,OAAO,CAACkC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGpC,OAAO,CAACU,MAAM,CAAC,CAAC;MACxEmD,gBAAgB,CAACD,YAAY,CAAC;MAC9Bb,WAAW,CAAC,IAAI,CAAC;MACjB;IACF;IAEA,MAAMe,WAAW,GAAG5B,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGN,gBAAgB,CAACpB,MAAM,CAAC;IACvE,MAAMkD,YAAY,GAAG9B,gBAAgB,CAACgC,WAAW,CAAC;IAClDD,gBAAgB,CAACD,YAAY,CAAC;IAC9Bb,WAAW,CAAC,IAAI,CAAC;EACnB,CAAC;EAED,MAAMc,gBAAgB,GAAI7B,MAAM,IAAK;IACnCT,gBAAgB,CAACS,MAAM,CAAC;IACxBM,mBAAmB,CAACnC,YAAY,CAAC6B,MAAM,CAAC/B,IAAI,CAAC,CAAC;IAC9CuC,gBAAgB,CAAChC,KAAK,CAACwB,MAAM,CAAC/B,IAAI,CAACS,MAAM,CAAC,CAAC+B,IAAI,CAAC,IAAI,CAAC,CAAC;IACtDE,mBAAmB,CAAC,EAAE,CAAC;EACzB,CAAC;EAED,MAAMoB,eAAe,GAAGA,CAACC,CAAC,EAAEC,MAAM,EAAEjD,KAAK,KAAK;IAC5CqC,gBAAgB,CAAC;MAAEY,MAAM;MAAEjD;IAAM,CAAC,CAAC;IACnCgD,CAAC,CAACE,MAAM,CAACC,SAAS,CAACC,GAAG,CAAC,UAAU,CAAC;EACpC,CAAC;EAED,MAAMC,cAAc,GAAIL,CAAC,IAAK;IAC5BA,CAAC,CAACM,cAAc,CAAC,CAAC;EACpB,CAAC;EAED,MAAMC,UAAU,GAAGA,CAACP,CAAC,EAAEQ,WAAW,KAAK;IACrCR,CAAC,CAACM,cAAc,CAAC,CAAC;IAClB,IAAI,CAAClB,aAAa,EAAE;IAEpB,IAAIA,aAAa,CAACa,MAAM,CAAC/C,OAAO,KAAKI,aAAa,CAACrB,IAAI,CAACuE,WAAW,CAAC,EAAE;MACpE3B,gBAAgB,CAAC2B,WAAW,CAAC;MAC7BC,UAAU,CAAC,MAAM;QACf5B,gBAAgB,CAAC,IAAI,CAAC;MACxB,CAAC,EAAE,GAAG,CAAC;MACP;IACF;IAEA,MAAM6B,gBAAgB,GAAG,CAAC,GAAGnC,aAAa,CAAC;IAC3C,MAAMoC,mBAAmB,GAAG,CAAC,GAAGtC,gBAAgB,CAAC;IAEjDqC,gBAAgB,CAACF,WAAW,CAAC,GAAGpB,aAAa,CAACa,MAAM;IACpDU,mBAAmB,CAACC,MAAM,CAACxB,aAAa,CAACpC,KAAK,EAAE,CAAC,CAAC;IAElDwB,gBAAgB,CAACkC,gBAAgB,CAAC;IAClCpC,mBAAmB,CAACqC,mBAAmB,CAAC;IAExC,MAAME,mBAAmB,GAAG,EAAE;IAC9BH,gBAAgB,CAACI,OAAO,CAAC,CAACb,MAAM,EAAEjD,KAAK,KAAK;MAC1C,IAAIiD,MAAM,IAAIA,MAAM,CAAC/C,OAAO,KAAKI,aAAa,CAACrB,IAAI,CAACe,KAAK,CAAC,EAAE;QAC1D6D,mBAAmB,CAACE,IAAI,CAAC/D,KAAK,CAAC;MACjC;IACF,CAAC,CAAC;IAEF2B,mBAAmB,CAACkC,mBAAmB,CAAC;IAExC,IAAIA,mBAAmB,CAACnE,MAAM,KAAKY,aAAa,CAACrB,IAAI,CAACS,MAAM,EAAE;MAC5D,MAAMsE,mBAAmB,GAAG,CAAC,GAAGhC,gBAAgB,EAAE1B,aAAa,CAACrB,IAAI,CAAC;MACrEgD,mBAAmB,CAAC+B,mBAAmB,CAAC;MACxCvD,YAAY,CAAC6B,OAAO,CAAC,kBAAkB,EAAE1B,IAAI,CAAC2B,SAAS,CAACyB,mBAAmB,CAAC,CAAC;MAE7E,IAAIA,mBAAmB,CAACtE,MAAM,KAAKV,OAAO,CAACU,MAAM,EAAE;QACjD+C,MAAM,CAACC,KAAK,CAAC,6CAA6C,CAAC;QAC3DjC,YAAY,CAACkC,UAAU,CAAC,kBAAkB,CAAC;QAC3CV,mBAAmB,CAAC,EAAE,CAAC;QACvB,MAAMW,YAAY,GAAG5D,OAAO,CAACkC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGpC,OAAO,CAACU,MAAM,CAAC,CAAC;QACxEmD,gBAAgB,CAACD,YAAY,CAAC;MAChC,CAAC,MAAM;QACL,MAAM9B,gBAAgB,GAAG9B,OAAO,CAAC+B,MAAM,CAACC,MAAM,IAAI,CAACgD,mBAAmB,CAAC/C,QAAQ,CAACD,MAAM,CAAC/B,IAAI,CAAC,CAAC;QAC7F,MAAM6D,WAAW,GAAG5B,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGN,gBAAgB,CAACpB,MAAM,CAAC;QACvE,MAAMkD,YAAY,GAAG9B,gBAAgB,CAACgC,WAAW,CAAC;QAClDD,gBAAgB,CAACD,YAAY,CAAC;MAChC;IACF;EACF,CAAC;EAED,MAAMqB,YAAY,GAAGA,CAAA,KAAM;IACzB,MAAMnD,gBAAgB,GAAG9B,OAAO,CAAC+B,MAAM,CAACC,MAAM,IAAI,CAACgB,gBAAgB,CAACf,QAAQ,CAACD,MAAM,CAAC/B,IAAI,CAAC,CAAC;IAE1F,IAAI6B,gBAAgB,CAACpB,MAAM,KAAK,CAAC,EAAE;MACjC+C,MAAM,CAACC,KAAK,CAAC,6CAA6C,CAAC;MAC3D;IACF;IAEA,MAAMI,WAAW,GAAG5B,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGN,gBAAgB,CAACpB,MAAM,CAAC;IACvE,MAAMkD,YAAY,GAAG9B,gBAAgB,CAACgC,WAAW,CAAC;IAClDD,gBAAgB,CAACD,YAAY,CAAC;IAC9Bb,WAAW,CAAC,IAAI,CAAC;EACnB,CAAC;EAED,MAAMmC,WAAW,GAAGA,CAAA,KAAM;IACxBzB,MAAM,CAACC,KAAK,CAAC,2BAA2B,CAAC;IACzCjC,YAAY,CAACkC,UAAU,CAAC,kBAAkB,CAAC;IAC3CV,mBAAmB,CAAC,EAAE,CAAC;IACvB,MAAMW,YAAY,GAAG5D,OAAO,CAACkC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGpC,OAAO,CAACU,MAAM,CAAC,CAAC;IACxEmD,gBAAgB,CAACD,YAAY,CAAC;IAC9Bb,WAAW,CAAC,IAAI,CAAC;EACnB,CAAC;EAEDrD,SAAS,CAAC,MAAM;IACd,MAAMyF,cAAc,GAAGA,CAAA,KAAM;MAC3B,MAAM3D,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,kBAAkB,CAAC;MACtD,MAAMC,YAAY,GAAGH,KAAK,GAAGI,IAAI,CAACC,KAAK,CAACL,KAAK,CAAC,GAAG,EAAE;MACnDyB,mBAAmB,CAACtB,YAAY,CAAC;MAEjC,MAAMG,gBAAgB,GAAG9B,OAAO,CAAC+B,MAAM,CAACC,MAAM,IAAI,CAACL,YAAY,CAACM,QAAQ,CAACD,MAAM,CAAC/B,IAAI,CAAC,CAAC;MACtF,IAAI6B,gBAAgB,CAACpB,MAAM,KAAK,CAAC,EAAE;QACjCqC,WAAW,CAAC,KAAK,CAAC;QAClB;MACF;MAEA,MAAMa,YAAY,GAAG9B,gBAAgB,CAACI,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGN,gBAAgB,CAACpB,MAAM,CAAC,CAAC;MAC1FmD,gBAAgB,CAACD,YAAY,CAAC;MAC9Bb,WAAW,CAAC,IAAI,CAAC;IACnB,CAAC;IAEDoC,cAAc,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEtF,OAAA;IAAKuF,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAC5BxF,OAAA;MAAIuF,SAAS,EAAC,YAAY;MAAAC,QAAA,EAAC;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrD5F,OAAA;MAAGuF,SAAS,EAAC,mBAAmB;MAAAC,QAAA,EAAC;IAEjC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,EAEHnE,aAAa,iBACZzB,OAAA,CAAAE,SAAA;MAAAsF,QAAA,gBACExF,OAAA;QACE6F,GAAG,EAAE,GAAGC,OAAO,CAACC,GAAG,CAACC,UAAU,WAAWvE,aAAa,CAACpB,KAAK,EAAG;QAC/D4F,GAAG,EAAExE,aAAa,CAACrB,IAAK;QACxBmF,SAAS,EAAC;MAAc;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzB,CAAC,eAEF5F,OAAA;QACEkG,GAAG,EAAE5C,kBAAmB;QACxBiC,SAAS,EAAC,kBAAkB;QAAAC,QAAA,EAE3B9C,aAAa,CAACxB,GAAG,CAAC,CAACkD,MAAM,EAAEjD,KAAK,kBAC/BnB,OAAA;UAEEuF,SAAS,EAAE,eAAe1C,gBAAgB,CAACT,QAAQ,CAACjB,KAAK,CAAC,GAAG,SAAS,GAAG,EAAE;AAC3F,4BAA4BiD,MAAM,GAAG,QAAQ,GAAG,EAAE;AAClD,4BAA4BrB,aAAa,KAAK5B,KAAK,GAAG,OAAO,GAAG,EAAE,EAAG;UACrDgF,UAAU,EAAE3B,cAAe;UAC3B4B,MAAM,EAAGjC,CAAC,IAAKO,UAAU,CAACP,CAAC,EAAEhD,KAAK,CAAE;UAAAqE,QAAA,EAEnCpB,MAAM,IAAIA,MAAM,CAAC/C;QAAO,GAPpBF,KAAK;UAAAsE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAQP,CACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eAEN5F,OAAA;QACEkG,GAAG,EAAE7C,mBAAoB;QACzBkC,SAAS,EAAC,mBAAmB;QAAAC,QAAA,EAE5BhD,gBAAgB,CAACtB,GAAG,CAAC,CAACkD,MAAM,EAAEjD,KAAK,kBAClCnB,OAAA;UAEE,WAASoE,MAAM,CAAChD,EAAG;UACnBmE,SAAS,EAAC,QAAQ;UAClBc,SAAS,EAAE,IAAK;UAChBC,WAAW,EAAGnC,CAAC,IAAKD,eAAe,CAACC,CAAC,EAAEC,MAAM,EAAEjD,KAAK,CAAE;UAAAqE,QAAA,EAErDpB,MAAM,CAAC/C;QAAO,GANV+C,MAAM,CAAChD,EAAE;UAAAqE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAOX,CACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC;IAAA,eACN,CACH;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACpE,EAAA,CAnNID,YAAY;AAAAgF,EAAA,GAAZhF,YAAY;AAqNlB,eAAeA,YAAY;AAAC,IAAAgF,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}