{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\osqel\\\\OneDrive\\\\Desktop\\\\New folder\\\\src\\\\context\\\\PlayerContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlayerContext = /*#__PURE__*/createContext();\nconst initialGameProgress = {\n  puzzles: [],\n  completedScrambleTasks: [],\n  taskScores: {},\n  completedTasks: [],\n  scrambleScores: {},\n  lastPlayed: null\n};\nexport const PlayerProvider = ({\n  children\n}) => {\n  _s();\n  const [gameProgress, setGameProgress] = useState(() => {\n    try {\n      const savedProgress = localStorage.getItem('gameProgress');\n      // Check if saved progress exists and is valid\n      if (savedProgress) {\n        const parsed = JSON.parse(savedProgress);\n        // Ensure all required properties exist\n        return {\n          ...initialGameProgress,\n          ...parsed,\n          puzzles: parsed.puzzles || [],\n          completedScrambleTasks: parsed.completedScrambleTasks || [],\n          taskScores: parsed.taskScores || {},\n          completedTasks: parsed.completedTasks || [],\n          scrambleScores: parsed.scrambleScores || {},\n          lastPlayed: parsed.lastPlayed || null\n        };\n      }\n      return initialGameProgress;\n    } catch (error) {\n      console.error('Error loading progress:', error);\n      return initialGameProgress;\n    }\n  });\n\n  // Save progress whenever it changes\n  useEffect(() => {\n    try {\n      // Ensure we're not saving null or undefined\n      if (gameProgress) {\n        localStorage.setItem('gameProgress', JSON.stringify(gameProgress));\n        console.log('Progress saved:', gameProgress);\n      }\n    } catch (error) {\n      console.error('Error saving progress:', error);\n    }\n  }, [gameProgress]);\n  const updateGameProgress = async (gameType, timestamp, data) => {\n    return new Promise(resolve => {\n      setGameProgress(prevProgress => {\n        // Create a new progress object with all required fields\n        const newProgress = {\n          ...prevProgress,\n          puzzles: prevProgress.puzzles || [],\n          completedScrambleTasks: prevProgress.completedScrambleTasks || [],\n          taskScores: prevProgress.taskScores || {},\n          completedTasks: prevProgress.completedTasks || [],\n          scrambleScores: prevProgress.scrambleScores || {},\n          lastPlayed: timestamp || new Date().toISOString()\n        };\n        switch (gameType) {\n          case 'puzzle':\n            if (data !== null && data !== void 0 && data.puzzleId && !newProgress.puzzles.includes(data.puzzleId)) {\n              newProgress.puzzles = [...newProgress.puzzles, data.puzzleId];\n            }\n            break;\n          case 'scramble':\n            if (data !== null && data !== void 0 && data.taskId && !newProgress.completedScrambleTasks.includes(data.taskId)) {\n              newProgress.completedScrambleTasks = [...newProgress.completedScrambleTasks, data.taskId];\n              if (data.score) {\n                newProgress.scrambleScores[data.taskId] = data.score;\n              }\n            }\n            break;\n          case 'task':\n            if (data !== null && data !== void 0 && data.taskId && !newProgress.completedTasks.includes(data.taskId)) {\n              newProgress.completedTasks = [...newProgress.completedTasks, data.taskId];\n              if (data.score) {\n                newProgress.taskScores[data.taskId] = data.score;\n              }\n            }\n            break;\n          case -1:\n            // Reset progress\n            return initialGameProgress;\n          default:\n            console.warn('Unknown game type:', gameType);\n        }\n\n        // Immediately save to localStorage\n        try {\n          localStorage.setItem('gameProgress', JSON.stringify(newProgress));\n          console.log('Progress saved successfully:', newProgress);\n        } catch (error) {\n          console.error('Failed to save progress:', error);\n        }\n        resolve(newProgress);\n        return newProgress;\n      });\n    });\n  };\n  const resetProgress = () => {\n    setGameProgress(initialGameProgress);\n    localStorage.setItem('gameProgress', JSON.stringify(initialGameProgress));\n  };\n  const value = {\n    gameProgress,\n    updateGameProgress,\n    resetProgress\n  };\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n};\n_s(PlayerProvider, \"nqbHL18s8NrTIt0q7AqumbvtsJc=\");\n_c = PlayerProvider;\nexport const usePlayer = () => {\n  _s2();\n  const context = useContext(PlayerContext);\n  if (!context) {\n    throw new Error('usePlayer must be used within a PlayerProvider');\n  }\n  return context;\n};\n_s2(usePlayer, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"PlayerProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","PlayerContext","initialGameProgress","puzzles","completedScrambleTasks","taskScores","completedTasks","scrambleScores","lastPlayed","PlayerProvider","children","_s","gameProgress","setGameProgress","savedProgress","localStorage","getItem","parsed","JSON","parse","error","console","setItem","stringify","log","updateGameProgress","gameType","timestamp","data","Promise","resolve","prevProgress","newProgress","Date","toISOString","puzzleId","includes","taskId","score","warn","resetProgress","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","usePlayer","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/osqel/OneDrive/Desktop/New folder/src/context/PlayerContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst PlayerContext = createContext();\n\nconst initialGameProgress = {\n  puzzles: [],\n  completedScrambleTasks: [],\n  taskScores: {},\n  completedTasks: [],\n  scrambleScores: {},\n  lastPlayed: null\n};\n\nexport const PlayerProvider = ({ children }) => {\n  const [gameProgress, setGameProgress] = useState(() => {\n    try {\n      const savedProgress = localStorage.getItem('gameProgress');\n      // Check if saved progress exists and is valid\n      if (savedProgress) {\n        const parsed = JSON.parse(savedProgress);\n        // Ensure all required properties exist\n        return {\n          ...initialGameProgress,\n          ...parsed,\n          puzzles: parsed.puzzles || [],\n          completedScrambleTasks: parsed.completedScrambleTasks || [],\n          taskScores: parsed.taskScores || {},\n          completedTasks: parsed.completedTasks || [],\n          scrambleScores: parsed.scrambleScores || {},\n          lastPlayed: parsed.lastPlayed || null\n        };\n      }\n      return initialGameProgress;\n    } catch (error) {\n      console.error('Error loading progress:', error);\n      return initialGameProgress;\n    }\n  });\n\n  // Save progress whenever it changes\n  useEffect(() => {\n    try {\n      // Ensure we're not saving null or undefined\n      if (gameProgress) {\n        localStorage.setItem('gameProgress', JSON.stringify(gameProgress));\n        console.log('Progress saved:', gameProgress);\n      }\n    } catch (error) {\n      console.error('Error saving progress:', error);\n    }\n  }, [gameProgress]);\n\n  const updateGameProgress = async (gameType, timestamp, data) => {\n    return new Promise((resolve) => {\n      setGameProgress(prevProgress => {\n        // Create a new progress object with all required fields\n        const newProgress = {\n          ...prevProgress,\n          puzzles: prevProgress.puzzles || [],\n          completedScrambleTasks: prevProgress.completedScrambleTasks || [],\n          taskScores: prevProgress.taskScores || {},\n          completedTasks: prevProgress.completedTasks || [],\n          scrambleScores: prevProgress.scrambleScores || {},\n          lastPlayed: timestamp || new Date().toISOString()\n        };\n\n        switch (gameType) {\n          case 'puzzle':\n            if (data?.puzzleId && !newProgress.puzzles.includes(data.puzzleId)) {\n              newProgress.puzzles = [...newProgress.puzzles, data.puzzleId];\n            }\n            break;\n\n          case 'scramble':\n            if (data?.taskId && !newProgress.completedScrambleTasks.includes(data.taskId)) {\n              newProgress.completedScrambleTasks = [...newProgress.completedScrambleTasks, data.taskId];\n              if (data.score) {\n                newProgress.scrambleScores[data.taskId] = data.score;\n              }\n            }\n            break;\n\n          case 'task':\n            if (data?.taskId && !newProgress.completedTasks.includes(data.taskId)) {\n              newProgress.completedTasks = [...newProgress.completedTasks, data.taskId];\n              if (data.score) {\n                newProgress.taskScores[data.taskId] = data.score;\n              }\n            }\n            break;\n\n          case -1: // Reset progress\n            return initialGameProgress;\n\n          default:\n            console.warn('Unknown game type:', gameType);\n        }\n\n        // Immediately save to localStorage\n        try {\n          localStorage.setItem('gameProgress', JSON.stringify(newProgress));\n          console.log('Progress saved successfully:', newProgress);\n        } catch (error) {\n          console.error('Failed to save progress:', error);\n        }\n\n        resolve(newProgress);\n        return newProgress;\n      });\n    });\n  };\n\n  const resetProgress = () => {\n    setGameProgress(initialGameProgress);\n    localStorage.setItem('gameProgress', JSON.stringify(initialGameProgress));\n  };\n\n  const value = {\n    gameProgress,\n    updateGameProgress,\n    resetProgress\n  };\n\n  return (\n    <PlayerContext.Provider value={value}>\n      {children}\n    </PlayerContext.Provider>\n  );\n};\n\nexport const usePlayer = () => {\n  const context = useContext(PlayerContext);\n  if (!context) {\n    throw new Error('usePlayer must be used within a PlayerProvider');\n  }\n  return context;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}