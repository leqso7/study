{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\osqel\\\\OneDrive\\\\Desktop\\\\New folder\\\\src\\\\context\\\\PlayerContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlayerContext = /*#__PURE__*/createContext();\nconst initialGameProgress = {\n  puzzles: [],\n  completedScrambleTasks: [],\n  taskScores: {},\n  completedTasks: [],\n  scrambleScores: {},\n  colorMatchingScores: [],\n  lastPlayed: null\n};\nexport const PlayerProvider = ({\n  children\n}) => {\n  _s();\n  const [gameProgress, setGameProgress] = useState(() => {\n    try {\n      const savedProgress = localStorage.getItem('gameProgress');\n      return savedProgress ? JSON.parse(savedProgress) : initialGameProgress;\n    } catch (error) {\n      console.error('Error loading progress:', error);\n      return initialGameProgress;\n    }\n  });\n  useEffect(() => {\n    try {\n      localStorage.setItem('gameProgress', JSON.stringify(gameProgress));\n    } catch (error) {\n      console.error('Error saving progress:', error);\n    }\n  }, [gameProgress]);\n  const updateGameProgress = (gameType, timestamp = Date.now(), data = {}) => {\n    setGameProgress(prevProgress => {\n      const newProgress = {\n        ...prevProgress\n      };\n      try {\n        switch (gameType) {\n          case 'puzzle':\n            if (!newProgress.puzzles.includes(data.puzzleId)) {\n              newProgress.puzzles = [...(newProgress.puzzles || []), data.puzzleId];\n            }\n            break;\n          case 'scramble':\n            if (!newProgress.completedScrambleTasks.includes(data.taskId)) {\n              newProgress.completedScrambleTasks = [...(newProgress.completedScrambleTasks || []), data.taskId];\n            }\n            if (data.score !== undefined) {\n              newProgress.scrambleScores = {\n                ...(newProgress.scrambleScores || {}),\n                [data.taskId]: data.score\n              };\n            }\n            break;\n          case 'task':\n            if (!newProgress.completedTasks.includes(data.taskId)) {\n              newProgress.completedTasks = [...(newProgress.completedTasks || []), data.taskId];\n            }\n            if (data.score !== undefined) {\n              newProgress.taskScores = {\n                ...(newProgress.taskScores || {}),\n                [data.taskId]: data.score\n              };\n            }\n            break;\n          case 'colorMatching':\n            newProgress.colorMatchingScores = [...(newProgress.colorMatchingScores || []), {\n              timestamp: timestamp,\n              score: data.score\n            }];\n            break;\n          default:\n            console.warn(`Unknown game type: ${gameType}`);\n            break;\n        }\n        newProgress.lastPlayed = timestamp;\n\n        // შევინახოთ ახალი პროგრესი ლოკალურ მეხსიერებაში\n        localStorage.setItem('gameProgress', JSON.stringify(newProgress));\n        return newProgress;\n      } catch (error) {\n        console.error('Error updating progress:', error);\n        return prevProgress;\n      }\n    });\n  };\n  const resetProgress = () => {\n    try {\n      setGameProgress(initialGameProgress);\n      localStorage.setItem('gameProgress', JSON.stringify(initialGameProgress));\n    } catch (error) {\n      console.error('Error resetting progress:', error);\n    }\n  };\n  const value = {\n    gameProgress,\n    updateGameProgress,\n    resetProgress\n  };\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n_s(PlayerProvider, \"B/kKPyJHg5/icd4f0HkkckHAUG8=\");\n_c = PlayerProvider;\nexport const usePlayer = () => {\n  _s2();\n  const context = useContext(PlayerContext);\n  if (!context) {\n    throw new Error('usePlayer must be used within a PlayerProvider');\n  }\n  return context;\n};\n_s2(usePlayer, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"PlayerProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","PlayerContext","initialGameProgress","puzzles","completedScrambleTasks","taskScores","completedTasks","scrambleScores","colorMatchingScores","lastPlayed","PlayerProvider","children","_s","gameProgress","setGameProgress","savedProgress","localStorage","getItem","JSON","parse","error","console","setItem","stringify","updateGameProgress","gameType","timestamp","Date","now","data","prevProgress","newProgress","includes","puzzleId","taskId","score","undefined","warn","resetProgress","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","usePlayer","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/osqel/OneDrive/Desktop/New folder/src/context/PlayerContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst PlayerContext = createContext();\n\nconst initialGameProgress = {\n  puzzles: [],\n  completedScrambleTasks: [],\n  taskScores: {},\n  completedTasks: [],\n  scrambleScores: {},\n  colorMatchingScores: [],\n  lastPlayed: null\n};\n\nexport const PlayerProvider = ({ children }) => {\n  const [gameProgress, setGameProgress] = useState(() => {\n    try {\n      const savedProgress = localStorage.getItem('gameProgress');\n      return savedProgress ? JSON.parse(savedProgress) : initialGameProgress;\n    } catch (error) {\n      console.error('Error loading progress:', error);\n      return initialGameProgress;\n    }\n  });\n\n  useEffect(() => {\n    try {\n      localStorage.setItem('gameProgress', JSON.stringify(gameProgress));\n    } catch (error) {\n      console.error('Error saving progress:', error);\n    }\n  }, [gameProgress]);\n\n  const updateGameProgress = (gameType, timestamp = Date.now(), data = {}) => {\n    setGameProgress(prevProgress => {\n      const newProgress = { ...prevProgress };\n\n      try {\n        switch (gameType) {\n          case 'puzzle':\n            if (!newProgress.puzzles.includes(data.puzzleId)) {\n              newProgress.puzzles = [...(newProgress.puzzles || []), data.puzzleId];\n            }\n            break;\n\n          case 'scramble':\n            if (!newProgress.completedScrambleTasks.includes(data.taskId)) {\n              newProgress.completedScrambleTasks = [...(newProgress.completedScrambleTasks || []), data.taskId];\n            }\n            if (data.score !== undefined) {\n              newProgress.scrambleScores = {\n                ...(newProgress.scrambleScores || {}),\n                [data.taskId]: data.score\n              };\n            }\n            break;\n\n          case 'task':\n            if (!newProgress.completedTasks.includes(data.taskId)) {\n              newProgress.completedTasks = [...(newProgress.completedTasks || []), data.taskId];\n            }\n            if (data.score !== undefined) {\n              newProgress.taskScores = {\n                ...(newProgress.taskScores || {}),\n                [data.taskId]: data.score\n              };\n            }\n            break;\n\n          case 'colorMatching':\n            newProgress.colorMatchingScores = [\n              ...(newProgress.colorMatchingScores || []),\n              {\n                timestamp: timestamp,\n                score: data.score\n              }\n            ];\n            break;\n\n          default:\n            console.warn(`Unknown game type: ${gameType}`);\n            break;\n        }\n\n        newProgress.lastPlayed = timestamp;\n        \n        // შევინახოთ ახალი პროგრესი ლოკალურ მეხსიერებაში\n        localStorage.setItem('gameProgress', JSON.stringify(newProgress));\n        \n        return newProgress;\n      } catch (error) {\n        console.error('Error updating progress:', error);\n        return prevProgress;\n      }\n    });\n  };\n\n  const resetProgress = () => {\n    try {\n      setGameProgress(initialGameProgress);\n      localStorage.setItem('gameProgress', JSON.stringify(initialGameProgress));\n    } catch (error) {\n      console.error('Error resetting progress:', error);\n    }\n  };\n\n  const value = {\n    gameProgress,\n    updateGameProgress,\n    resetProgress\n  };\n\n  return (\n    <PlayerContext.Provider value={value}>\n      {children}\n    </PlayerContext.Provider>\n  );\n};\n\nexport const usePlayer = () => {\n  const context = useContext(PlayerContext);\n  if (!context) {\n    throw new Error('usePlayer must be used within a PlayerProvider');\n  }\n  return context;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}