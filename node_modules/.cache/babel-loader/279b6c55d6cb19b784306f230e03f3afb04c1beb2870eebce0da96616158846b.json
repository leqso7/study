{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\osqel\\\\OneDrive\\\\Desktop\\\\New folder\\\\src\\\\components\\\\ScrambleGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport '../styles/ScrambleGame.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst categories = {\n  animals: [{\n    name: \"კატა\",\n    image: \"cat.jpg\"\n  }, {\n    name: \"ძაღლი\",\n    image: \"dog.jpg\"\n  }\n  // ... სხვა ცხოველები\n  ],\n  instruments: [{\n    name: \"პიანინო\",\n    image: \"piano.jpg\"\n  }, {\n    name: \"გიტარა\",\n    image: \"guitar.jpg\"\n  }\n  // ... სხვა ინსტრუმენტები\n  ]\n};\nconst ScrambleGame = () => {\n  _s();\n  const [currentCategory, setCurrentCategory] = useState('animals');\n  const [currentAnimal, setCurrentAnimal] = useState(null);\n  const [scrambledLetters, setScrambledLetters] = useState([]);\n  const [placedLetters, setPlacedLetters] = useState([]);\n  const [correctPositions, setCorrectPositions] = useState([]);\n  const [wrongPosition, setWrongPosition] = useState(null);\n  const [showGame, setShowGame] = useState(false);\n  const [completedTasks, setCompletedTasks] = useState(() => {\n    const saved = localStorage.getItem('completedTasks');\n    return saved ? JSON.parse(saved) : {\n      animals: [],\n      instruments: []\n    };\n  });\n  const lettersContainerRef = useRef(null);\n  const targetContainerRef = useRef(null);\n  const [draggedLetter, setDraggedLetter] = useState(null);\n  useEffect(() => {\n    localStorage.setItem('completedTasks', JSON.stringify(completedTasks));\n  }, [completedTasks]);\n  const checkAndResetProgress = () => {\n    const saved = localStorage.getItem('completedTasks');\n    const savedTasks = saved ? JSON.parse(saved) : {\n      animals: [],\n      instruments: []\n    };\n    if (savedTasks.animals.length === categories.animals.length && savedTasks.instruments.length === categories.instruments.length) {\n      const shouldReset = window.confirm('თქვენ უკვე გაქვთ ყველა ამოცანა შესრულებული! გსურთ თავიდან დაწყება?');\n      if (shouldReset) {\n        localStorage.removeItem('completedTasks');\n        setCompletedTasks({\n          animals: [],\n          instruments: []\n        });\n        return true;\n      }\n      return false;\n    }\n    if (savedTasks.animals.length > 0 || savedTasks.instruments.length > 0) {\n      setCompletedTasks(savedTasks);\n    }\n    return true;\n  };\n  const scrambleWord = word => {\n    const originalLetters = word.split('');\n    let scrambledIndices = Array.from({\n      length: word.length\n    }, (_, i) => i);\n\n    // შევქმნათ ისეთი მასივი სადაც არცერთი ინდექსი არ ემთხვევა თავის ორიგინალ პოზიციას\n    for (let i = 0; i < word.length; i++) {\n      let currentIndex = scrambledIndices[i];\n      if (currentIndex === i) {\n        // თუ ინდექსი ემთხვევა თავის პოზიციას, ვცვლით სხვა პოზიციასთან\n        for (let j = i + 1; j < word.length; j++) {\n          if (scrambledIndices[j] !== i) {\n            // გავცვალოთ პოზიციები\n            [scrambledIndices[i], scrambledIndices[j]] = [scrambledIndices[j], scrambledIndices[i]];\n            break;\n          }\n        }\n        // თუ ვერ ვიპოვეთ შესაფერისი პოზიცია წინ, ვეძებთ უკან\n        if (scrambledIndices[i] === i) {\n          for (let j = i - 1; j >= 0; j--) {\n            if (scrambledIndices[j] !== j) {\n              [scrambledIndices[i], scrambledIndices[j]] = [scrambledIndices[j], scrambledIndices[i]];\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    // ვქმნით საბოლოო არეულ მასივს\n    return scrambledIndices.map((index, i) => ({\n      id: `letter-${i}`,\n      content: originalLetters[index],\n      originalIndex: index\n    }));\n  };\n  const selectRandomAnimal = () => {\n    const availableAnimals = categories[currentCategory].filter(animal => !completedTasks[currentCategory].includes(animal.name));\n    if (availableAnimals.length === 0) {\n      const shouldReset = window.confirm('გილოცავთ! თქვენ ყველა ამოცანა შეასრულეთ! გსურთ თავიდან დაწყება?');\n      if (shouldReset) {\n        localStorage.removeItem('completedTasks');\n        setCompletedTasks({\n          animals: [],\n          instruments: []\n        });\n        const randomAnimal = categories[currentCategory][Math.floor(Math.random() * categories[currentCategory].length)];\n        initializeAnimal(randomAnimal);\n        setShowGame(true);\n      } else {\n        setShowGame(false);\n      }\n      return;\n    }\n    const randomIndex = Math.floor(Math.random() * availableAnimals.length);\n    const randomAnimal = availableAnimals[randomIndex];\n    initializeAnimal(randomAnimal);\n    setShowGame(true);\n  };\n  const initializeAnimal = animal => {\n    setCurrentAnimal(animal);\n    setScrambledLetters(scrambleWord(animal.name));\n    setPlacedLetters(Array(animal.name.length).fill(null));\n    setCorrectPositions([]);\n  };\n  const handleDragStart = (e, letter, index) => {\n    setDraggedLetter({\n      letter,\n      index\n    });\n    e.target.classList.add('dragging');\n  };\n  const handleDragOver = e => {\n    e.preventDefault();\n  };\n  const handleDrop = (e, targetIndex) => {\n    e.preventDefault();\n    if (!draggedLetter) return;\n    if (draggedLetter.letter.content !== currentAnimal.name[targetIndex]) {\n      setWrongPosition(targetIndex);\n      setTimeout(() => {\n        setWrongPosition(null);\n      }, 500);\n      return;\n    }\n    const newPlacedLetters = [...placedLetters];\n    const newScrambledLetters = [...scrambledLetters];\n    newPlacedLetters[targetIndex] = draggedLetter.letter;\n    newScrambledLetters.splice(draggedLetter.index, 1);\n    setPlacedLetters(newPlacedLetters);\n    setScrambledLetters(newScrambledLetters);\n    const newCorrectPositions = [];\n    newPlacedLetters.forEach((letter, index) => {\n      if (letter && letter.content === currentAnimal.name[index]) {\n        newCorrectPositions.push(index);\n      }\n    });\n    setCorrectPositions(newCorrectPositions);\n    if (newCorrectPositions.length === currentAnimal.name.length) {\n      const newCompletedTasks = {\n        ...completedTasks,\n        [currentCategory]: [...completedTasks[currentCategory], currentAnimal.name]\n      };\n      setCompletedTasks(newCompletedTasks);\n      localStorage.setItem('completedTasks', JSON.stringify(newCompletedTasks));\n      if (newCompletedTasks.animals.length === categories.animals.length && newCompletedTasks.instruments.length === categories.instruments.length) {\n        setShowGame(false);\n        window.alert('გილოცავთ! თქვენ ყველა ამოცანა შეასრულეთ! 🎉');\n      } else {\n        setShowGame(false);\n      }\n    }\n  };\n  const startNewGame = () => {\n    // ჯერ ვცდილობთ მიმდინარე კატეგორიიდან\n    let availableTasks = categories[currentCategory].filter(item => !completedTasks[currentCategory].includes(item.name));\n\n    // თუ მიმდინარე კატეგორია ცარიელია, ვცდილობთ სხვა კატეგორიას\n    if (availableTasks.length === 0) {\n      const otherCategory = currentCategory === 'animals' ? 'instruments' : 'animals';\n      availableTasks = categories[otherCategory].filter(item => !completedTasks[otherCategory].includes(item.name));\n      if (availableTasks.length > 0) {\n        setCurrentCategory(otherCategory);\n      } else {\n        window.alert('გილოცავთ! თქვენ ყველა ამოცანა შეასრულეთ! 🎉');\n        return;\n      }\n    }\n    const randomTask = availableTasks[Math.floor(Math.random() * availableTasks.length)];\n    initializeAnimal(randomTask);\n    setShowGame(true);\n  };\n  const handleTaskComplete = taskName => {\n    setCompletedTasks(prev => ({\n      ...prev,\n      [currentCategory]: [...prev[currentCategory], taskName]\n    }));\n  };\n  const handleReset = () => {\n    window.alert('თამაში იწყება თავიდან! 🎮');\n    localStorage.removeItem('completedTasks');\n    setCompletedTasks({\n      animals: [],\n      instruments: []\n    });\n    setCurrentCategory('animals');\n    startNewGame();\n  };\n  useEffect(() => {\n    const initializeGame = () => {\n      const saved = localStorage.getItem('completedTasks');\n      const savedTasks = saved ? JSON.parse(saved) : {\n        animals: [],\n        instruments: []\n      };\n      setCompletedTasks(savedTasks);\n      const availableAnimals = categories[currentCategory].filter(animal => !savedTasks[currentCategory].includes(animal.name));\n      if (availableAnimals.length === 0) {\n        setShowGame(false);\n        return;\n      }\n      const randomAnimal = availableAnimals[Math.floor(Math.random() * availableAnimals.length)];\n      initializeAnimal(randomAnimal);\n      setShowGame(true);\n    };\n    initializeGame();\n  }, []);\n  if (!currentAnimal || !showGame) {\n    const remainingCount = categories[currentCategory].length - completedTasks[currentCategory].length;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scramble-game\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"game-title\",\n        children: \"\\u10E1\\u10D0\\u10EE\\u10D0\\u10DA\\u10D8\\u10E1\\u10DD \\u10D0\\u10DB\\u10DD\\u10EA\\u10D0\\u10DC\\u10D4\\u10D1\\u10D8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"progress-text\",\n        children: [\"\\u10E8\\u10D4\\u10E1\\u10E0\\u10E3\\u10DA\\u10D4\\u10D1\\u10E3\\u10DA\\u10D8 \\u10D0\\u10DB\\u10DD\\u10EA\\u10D0\\u10DC\\u10D4\\u10D1\\u10D8: \", completedTasks[currentCategory].length, \" / \", categories[currentCategory].length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 246,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startNewGame,\n        className: \"scramble-button\",\n        children: [\"\\u10E8\\u10D4\\u10DB\\u10D3\\u10D4\\u10D2\\u10D8 \\u10D0\\u10DB\\u10DD\\u10EA\\u10D0\\u10DC\\u10D0 \", remainingCount > 0 ? `(დარჩენილია ${remainingCount})` : '']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this), completedTasks[currentCategory].length === categories[currentCategory].length && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleReset,\n        className: \"scramble-button reset\",\n        children: \"\\u10D7\\u10D0\\u10D5\\u10D8\\u10D3\\u10D0\\u10DC \\u10D3\\u10D0\\u10EC\\u10E7\\u10D4\\u10D1\\u10D0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"scramble-game\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"game-title\",\n      children: \"\\u10D3\\u10D0\\u10D0\\u10DA\\u10D0\\u10D2\\u10D4 \\u10D0\\u10E1\\u10DD\\u10D4\\u10D1\\u10D8 \\u10E1\\u10EC\\u10DD\\u10E0\\u10D0\\u10D3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"game-instructions\",\n      children: \"\\u10D2\\u10D0\\u10D3\\u10DB\\u10DD\\u10D8\\u10E2\\u10D0\\u10DC\\u10D4 \\u10D0\\u10E1\\u10DD\\u10D4\\u10D1\\u10D8 \\u10D3\\u10D0 \\u10E9\\u10D0\\u10E1\\u10D5\\u10D8 \\u10E1\\u10EC\\u10DD\\u10E0 \\u10D0\\u10D3\\u10D2\\u10D8\\u10DA\\u10D0\\u10E1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"progress-text\",\n      children: [\"\\u10D3\\u10D0\\u10E0\\u10E9\\u10D4\\u10DC\\u10D8\\u10DA\\u10D8 \\u10D0\\u10DB\\u10DD\\u10EA\\u10D0\\u10DC\\u10D4\\u10D1\\u10D8: \", categories[currentCategory].length - completedTasks[currentCategory].length, \" / \", categories[currentCategory].length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 267,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: `${process.env.PUBLIC_URL}/photos/${currentAnimal.image}`,\n      alt: currentAnimal.name,\n      className: \"animal-image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 271,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: targetContainerRef,\n      className: \"target-container\",\n      children: placedLetters.map((letter, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `letter-slot ${correctPositions.includes(index) ? 'correct' : ''} \n                      ${letter ? 'filled' : ''} \n                      ${wrongPosition === index ? 'wrong' : ''}`,\n        onDragOver: handleDragOver,\n        onDrop: e => handleDrop(e, index),\n        children: letter && letter.content\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: lettersContainerRef,\n      className: \"letters-container\",\n      children: scrambledLetters.map((letter, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        \"data-id\": letter.id,\n        className: \"letter\",\n        draggable: true,\n        onDragStart: e => handleDragStart(e, letter, index),\n        children: letter.content\n      }, letter.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 262,\n    columnNumber: 5\n  }, this);\n};\n_s(ScrambleGame, \"Igx+lyp7TQ2GhmnD5B4KmQGVP/M=\");\n_c = ScrambleGame;\nexport default ScrambleGame;\nvar _c;\n$RefreshReg$(_c, \"ScrambleGame\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","categories","animals","name","image","instruments","ScrambleGame","_s","currentCategory","setCurrentCategory","currentAnimal","setCurrentAnimal","scrambledLetters","setScrambledLetters","placedLetters","setPlacedLetters","correctPositions","setCorrectPositions","wrongPosition","setWrongPosition","showGame","setShowGame","completedTasks","setCompletedTasks","saved","localStorage","getItem","JSON","parse","lettersContainerRef","targetContainerRef","draggedLetter","setDraggedLetter","setItem","stringify","checkAndResetProgress","savedTasks","length","shouldReset","window","confirm","removeItem","scrambleWord","word","originalLetters","split","scrambledIndices","Array","from","_","i","currentIndex","j","map","index","id","content","originalIndex","selectRandomAnimal","availableAnimals","filter","animal","includes","randomAnimal","Math","floor","random","initializeAnimal","randomIndex","fill","handleDragStart","e","letter","target","classList","add","handleDragOver","preventDefault","handleDrop","targetIndex","setTimeout","newPlacedLetters","newScrambledLetters","splice","newCorrectPositions","forEach","push","newCompletedTasks","alert","startNewGame","availableTasks","item","otherCategory","randomTask","handleTaskComplete","taskName","prev","handleReset","initializeGame","remainingCount","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","process","env","PUBLIC_URL","alt","ref","onDragOver","onDrop","draggable","onDragStart","_c","$RefreshReg$"],"sources":["C:/Users/osqel/OneDrive/Desktop/New folder/src/components/ScrambleGame.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport '../styles/ScrambleGame.css';\r\n\r\nconst categories = {\r\n  animals: [\r\n    { name: \"კატა\", image: \"cat.jpg\" },\r\n    { name: \"ძაღლი\", image: \"dog.jpg\" },\r\n    // ... სხვა ცხოველები\r\n  ],\r\n  instruments: [\r\n    { name: \"პიანინო\", image: \"piano.jpg\" },\r\n    { name: \"გიტარა\", image: \"guitar.jpg\" },\r\n    // ... სხვა ინსტრუმენტები\r\n  ]\r\n};\r\n\r\nconst ScrambleGame = () => {\r\n  const [currentCategory, setCurrentCategory] = useState('animals');\r\n  const [currentAnimal, setCurrentAnimal] = useState(null);\r\n  const [scrambledLetters, setScrambledLetters] = useState([]);\r\n  const [placedLetters, setPlacedLetters] = useState([]);\r\n  const [correctPositions, setCorrectPositions] = useState([]);\r\n  const [wrongPosition, setWrongPosition] = useState(null);\r\n  const [showGame, setShowGame] = useState(false);\r\n  const [completedTasks, setCompletedTasks] = useState(() => {\r\n    const saved = localStorage.getItem('completedTasks');\r\n    return saved ? JSON.parse(saved) : { animals: [], instruments: [] };\r\n  });\r\n  const lettersContainerRef = useRef(null);\r\n  const targetContainerRef = useRef(null);\r\n  const [draggedLetter, setDraggedLetter] = useState(null);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('completedTasks', JSON.stringify(completedTasks));\r\n  }, [completedTasks]);\r\n\r\n  const checkAndResetProgress = () => {\r\n    const saved = localStorage.getItem('completedTasks');\r\n    const savedTasks = saved ? JSON.parse(saved) : { animals: [], instruments: [] };\r\n    \r\n    if (savedTasks.animals.length === categories.animals.length && savedTasks.instruments.length === categories.instruments.length) {\r\n      const shouldReset = window.confirm('თქვენ უკვე გაქვთ ყველა ამოცანა შესრულებული! გსურთ თავიდან დაწყება?');\r\n      if (shouldReset) {\r\n        localStorage.removeItem('completedTasks');\r\n        setCompletedTasks({ animals: [], instruments: [] });\r\n        return true;\r\n      }\r\n      return false;\r\n    }\r\n    \r\n    if (savedTasks.animals.length > 0 || savedTasks.instruments.length > 0) {\r\n      setCompletedTasks(savedTasks);\r\n    }\r\n    return true;\r\n  };\r\n\r\n  const scrambleWord = (word) => {\r\n    const originalLetters = word.split('');\r\n    let scrambledIndices = Array.from({ length: word.length }, (_, i) => i);\r\n    \r\n    // შევქმნათ ისეთი მასივი სადაც არცერთი ინდექსი არ ემთხვევა თავის ორიგინალ პოზიციას\r\n    for (let i = 0; i < word.length; i++) {\r\n      let currentIndex = scrambledIndices[i];\r\n      if (currentIndex === i) {\r\n        // თუ ინდექსი ემთხვევა თავის პოზიციას, ვცვლით სხვა პოზიციასთან\r\n        for (let j = i + 1; j < word.length; j++) {\r\n          if (scrambledIndices[j] !== i) {\r\n            // გავცვალოთ პოზიციები\r\n            [scrambledIndices[i], scrambledIndices[j]] = [scrambledIndices[j], scrambledIndices[i]];\r\n            break;\r\n          }\r\n        }\r\n        // თუ ვერ ვიპოვეთ შესაფერისი პოზიცია წინ, ვეძებთ უკან\r\n        if (scrambledIndices[i] === i) {\r\n          for (let j = i - 1; j >= 0; j--) {\r\n            if (scrambledIndices[j] !== j) {\r\n              [scrambledIndices[i], scrambledIndices[j]] = [scrambledIndices[j], scrambledIndices[i]];\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    // ვქმნით საბოლოო არეულ მასივს\r\n    return scrambledIndices.map((index, i) => ({\r\n      id: `letter-${i}`,\r\n      content: originalLetters[index],\r\n      originalIndex: index\r\n    }));\r\n  };\r\n\r\n  const selectRandomAnimal = () => {\r\n    const availableAnimals = categories[currentCategory].filter(animal => !completedTasks[currentCategory].includes(animal.name));\r\n    \r\n    if (availableAnimals.length === 0) {\r\n      const shouldReset = window.confirm('გილოცავთ! თქვენ ყველა ამოცანა შეასრულეთ! გსურთ თავიდან დაწყება?');\r\n      if (shouldReset) {\r\n        localStorage.removeItem('completedTasks');\r\n        setCompletedTasks({ animals: [], instruments: [] });\r\n        const randomAnimal = categories[currentCategory][Math.floor(Math.random() * categories[currentCategory].length)];\r\n        initializeAnimal(randomAnimal);\r\n        setShowGame(true);\r\n      } else {\r\n        setShowGame(false);\r\n      }\r\n      return;\r\n    }\r\n    \r\n    const randomIndex = Math.floor(Math.random() * availableAnimals.length);\r\n    const randomAnimal = availableAnimals[randomIndex];\r\n    \r\n    initializeAnimal(randomAnimal);\r\n    setShowGame(true);\r\n  };\r\n\r\n  const initializeAnimal = (animal) => {\r\n    setCurrentAnimal(animal);\r\n    setScrambledLetters(scrambleWord(animal.name));\r\n    setPlacedLetters(Array(animal.name.length).fill(null));\r\n    setCorrectPositions([]);\r\n  };\r\n\r\n  const handleDragStart = (e, letter, index) => {\r\n    setDraggedLetter({ letter, index });\r\n    e.target.classList.add('dragging');\r\n  };\r\n\r\n  const handleDragOver = (e) => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  const handleDrop = (e, targetIndex) => {\r\n    e.preventDefault();\r\n    if (!draggedLetter) return;\r\n\r\n    if (draggedLetter.letter.content !== currentAnimal.name[targetIndex]) {\r\n      setWrongPosition(targetIndex);\r\n      setTimeout(() => {\r\n        setWrongPosition(null);\r\n      }, 500);\r\n      return;\r\n    }\r\n\r\n    const newPlacedLetters = [...placedLetters];\r\n    const newScrambledLetters = [...scrambledLetters];\r\n\r\n    newPlacedLetters[targetIndex] = draggedLetter.letter;\r\n    newScrambledLetters.splice(draggedLetter.index, 1);\r\n\r\n    setPlacedLetters(newPlacedLetters);\r\n    setScrambledLetters(newScrambledLetters);\r\n\r\n    const newCorrectPositions = [];\r\n    newPlacedLetters.forEach((letter, index) => {\r\n      if (letter && letter.content === currentAnimal.name[index]) {\r\n        newCorrectPositions.push(index);\r\n      }\r\n    });\r\n\r\n    setCorrectPositions(newCorrectPositions);\r\n\r\n    if (newCorrectPositions.length === currentAnimal.name.length) {\r\n      const newCompletedTasks = {\r\n        ...completedTasks,\r\n        [currentCategory]: [...completedTasks[currentCategory], currentAnimal.name]\r\n      };\r\n      setCompletedTasks(newCompletedTasks);\r\n      localStorage.setItem('completedTasks', JSON.stringify(newCompletedTasks));\r\n      \r\n      if (newCompletedTasks.animals.length === categories.animals.length && newCompletedTasks.instruments.length === categories.instruments.length) {\r\n        setShowGame(false);\r\n        window.alert('გილოცავთ! თქვენ ყველა ამოცანა შეასრულეთ! 🎉');\r\n      } else {\r\n        setShowGame(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const startNewGame = () => {\r\n    // ჯერ ვცდილობთ მიმდინარე კატეგორიიდან\r\n    let availableTasks = categories[currentCategory].filter(\r\n      item => !completedTasks[currentCategory].includes(item.name)\r\n    );\r\n\r\n    // თუ მიმდინარე კატეგორია ცარიელია, ვცდილობთ სხვა კატეგორიას\r\n    if (availableTasks.length === 0) {\r\n      const otherCategory = currentCategory === 'animals' ? 'instruments' : 'animals';\r\n      availableTasks = categories[otherCategory].filter(\r\n        item => !completedTasks[otherCategory].includes(item.name)\r\n      );\r\n      \r\n      if (availableTasks.length > 0) {\r\n        setCurrentCategory(otherCategory);\r\n      } else {\r\n        window.alert('გილოცავთ! თქვენ ყველა ამოცანა შეასრულეთ! 🎉');\r\n        return;\r\n      }\r\n    }\r\n\r\n    const randomTask = availableTasks[Math.floor(Math.random() * availableTasks.length)];\r\n    initializeAnimal(randomTask);\r\n    setShowGame(true);\r\n  };\r\n\r\n  const handleTaskComplete = (taskName) => {\r\n    setCompletedTasks(prev => ({\r\n      ...prev,\r\n      [currentCategory]: [...prev[currentCategory], taskName]\r\n    }));\r\n  };\r\n\r\n  const handleReset = () => {\r\n    window.alert('თამაში იწყება თავიდან! 🎮');\r\n    localStorage.removeItem('completedTasks');\r\n    setCompletedTasks({ animals: [], instruments: [] });\r\n    setCurrentCategory('animals');\r\n    startNewGame();\r\n  };\r\n\r\n  useEffect(() => {\r\n    const initializeGame = () => {\r\n      const saved = localStorage.getItem('completedTasks');\r\n      const savedTasks = saved ? JSON.parse(saved) : { animals: [], instruments: [] };\r\n      setCompletedTasks(savedTasks);\r\n      \r\n      const availableAnimals = categories[currentCategory].filter(animal => !savedTasks[currentCategory].includes(animal.name));\r\n      if (availableAnimals.length === 0) {\r\n        setShowGame(false);\r\n        return;\r\n      }\r\n      \r\n      const randomAnimal = availableAnimals[Math.floor(Math.random() * availableAnimals.length)];\r\n      initializeAnimal(randomAnimal);\r\n      setShowGame(true);\r\n    };\r\n\r\n    initializeGame();\r\n  }, []);\r\n\r\n  if (!currentAnimal || !showGame) {\r\n    const remainingCount = categories[currentCategory].length - completedTasks[currentCategory].length;\r\n    return (\r\n      <div className=\"scramble-game\">\r\n        <h2 className=\"game-title\">სახალისო ამოცანები</h2>\r\n        <p className=\"progress-text\">\r\n          შესრულებული ამოცანები: {completedTasks[currentCategory].length} / {categories[currentCategory].length}\r\n        </p>\r\n        <button onClick={startNewGame} className=\"scramble-button\">\r\n          შემდეგი ამოცანა {remainingCount > 0 ? `(დარჩენილია ${remainingCount})` : ''}\r\n        </button>\r\n        {completedTasks[currentCategory].length === categories[currentCategory].length && (\r\n          <button onClick={handleReset} className=\"scramble-button reset\">\r\n            თავიდან დაწყება\r\n          </button>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"scramble-game\">\r\n      <h2 className=\"game-title\">დაალაგე ასოები სწორად</h2>\r\n      <p className=\"game-instructions\">\r\n        გადმოიტანე ასოები და ჩასვი სწორ ადგილას\r\n      </p>\r\n      <p className=\"progress-text\">\r\n        დარჩენილი ამოცანები: {categories[currentCategory].length - completedTasks[currentCategory].length} / {categories[currentCategory].length}\r\n      </p>\r\n      \r\n      <img \r\n        src={`${process.env.PUBLIC_URL}/photos/${currentAnimal.image}`} \r\n        alt={currentAnimal.name}\r\n        className=\"animal-image\"\r\n      />\r\n      \r\n      <div \r\n        ref={targetContainerRef}\r\n        className=\"target-container\"\r\n      >\r\n        {placedLetters.map((letter, index) => (\r\n          <div\r\n            key={index}\r\n            className={`letter-slot ${correctPositions.includes(index) ? 'correct' : ''} \r\n                      ${letter ? 'filled' : ''} \r\n                      ${wrongPosition === index ? 'wrong' : ''}`}\r\n            onDragOver={handleDragOver}\r\n            onDrop={(e) => handleDrop(e, index)}\r\n          >\r\n            {letter && letter.content}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <div \r\n        ref={lettersContainerRef}\r\n        className=\"letters-container\"\r\n      >\r\n        {scrambledLetters.map((letter, index) => (\r\n          <div\r\n            key={letter.id}\r\n            data-id={letter.id}\r\n            className=\"letter\"\r\n            draggable={true}\r\n            onDragStart={(e) => handleDragStart(e, letter, index)}\r\n          >\r\n            {letter.content}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ScrambleGame; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}