{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\osqel\\\\OneDrive\\\\Desktop\\\\New folder\\\\src\\\\context\\\\PlayerContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlayerContext = /*#__PURE__*/createContext();\nconst initialGameProgress = {\n  puzzles: [],\n  completedScrambleTasks: [],\n  taskScores: {},\n  completedTasks: [],\n  scrambleScores: {},\n  lastPlayed: null\n};\nexport const PlayerProvider = ({\n  children\n}) => {\n  _s();\n  const [gameProgress, setGameProgress] = useState(() => {\n    const savedProgress = localStorage.getItem('gameProgress');\n    return savedProgress ? JSON.parse(savedProgress) : initialGameProgress;\n  });\n  useEffect(() => {\n    try {\n      localStorage.setItem('gameProgress', JSON.stringify(gameProgress));\n    } catch (error) {\n      console.error('Error saving progress:', error);\n    }\n  }, [gameProgress]);\n  const updateGameProgress = (gameType, timestamp, data) => {\n    setGameProgress(prevProgress => {\n      const newProgress = {\n        ...prevProgress\n      };\n      switch (gameType) {\n        case 'puzzle':\n          if (!newProgress.puzzles.includes(data.puzzleId)) {\n            newProgress.puzzles = [...(newProgress.puzzles || []), data.puzzleId];\n          }\n          break;\n        case 'scramble':\n          if (!newProgress.completedScrambleTasks.includes(data.taskId)) {\n            newProgress.completedScrambleTasks = [...(newProgress.completedScrambleTasks || []), data.taskId];\n          }\n          if (data.score !== undefined) {\n            newProgress.scrambleScores = {\n              ...(newProgress.scrambleScores || {}),\n              [data.taskId]: data.score\n            };\n          }\n          break;\n        case 'task':\n          // Initialize arrays if they don't exist\n          if (!newProgress.completedTasks) newProgress.completedTasks = [];\n          if (!newProgress.taskScores) newProgress.taskScores = {};\n\n          // Add task to completed tasks if not already there\n          if (!newProgress.completedTasks.includes(data.taskId)) {\n            newProgress.completedTasks = [...newProgress.completedTasks, data.taskId];\n            console.log('Added task to completed tasks:', data.taskId);\n          }\n\n          // Update task score\n          if (data.score !== undefined) {\n            newProgress.taskScores[data.taskId] = data.score;\n            console.log('Updated task score:', data.taskId, data.score);\n          }\n          break;\n      }\n      newProgress.lastPlayed = timestamp;\n\n      // Log the updated progress\n      console.log('Updated game progress:', newProgress);\n\n      // Ensure the progress is saved to localStorage\n      try {\n        localStorage.setItem('gameProgress', JSON.stringify(newProgress));\n      } catch (error) {\n        console.error('Failed to save progress to localStorage:', error);\n      }\n      return newProgress;\n    });\n  };\n  const resetProgress = () => {\n    setGameProgress(initialGameProgress);\n    localStorage.setItem('gameProgress', JSON.stringify(initialGameProgress));\n  };\n  const value = {\n    gameProgress,\n    updateGameProgress,\n    resetProgress\n  };\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n_s(PlayerProvider, \"Pz6RfhI/LErcu8fIWsCkOXj+TCA=\");\n_c = PlayerProvider;\nexport const usePlayer = () => {\n  _s2();\n  const context = useContext(PlayerContext);\n  if (!context) {\n    throw new Error('usePlayer must be used within a PlayerProvider');\n  }\n  return context;\n};\n_s2(usePlayer, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"PlayerProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","PlayerContext","initialGameProgress","puzzles","completedScrambleTasks","taskScores","completedTasks","scrambleScores","lastPlayed","PlayerProvider","children","_s","gameProgress","setGameProgress","savedProgress","localStorage","getItem","JSON","parse","setItem","stringify","error","console","updateGameProgress","gameType","timestamp","data","prevProgress","newProgress","includes","puzzleId","taskId","score","undefined","log","resetProgress","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","usePlayer","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/osqel/OneDrive/Desktop/New folder/src/context/PlayerContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst PlayerContext = createContext();\n\nconst initialGameProgress = {\n  puzzles: [],\n  completedScrambleTasks: [],\n  taskScores: {},\n  completedTasks: [],\n  scrambleScores: {},\n  lastPlayed: null\n};\n\nexport const PlayerProvider = ({ children }) => {\n  const [gameProgress, setGameProgress] = useState(() => {\n    const savedProgress = localStorage.getItem('gameProgress');\n    return savedProgress ? JSON.parse(savedProgress) : initialGameProgress;\n  });\n\n  useEffect(() => {\n    try {\n      localStorage.setItem('gameProgress', JSON.stringify(gameProgress));\n    } catch (error) {\n      console.error('Error saving progress:', error);\n    }\n  }, [gameProgress]);\n\n  const updateGameProgress = (gameType, timestamp, data) => {\n    setGameProgress(prevProgress => {\n      const newProgress = { ...prevProgress };\n\n      switch (gameType) {\n        case 'puzzle':\n          if (!newProgress.puzzles.includes(data.puzzleId)) {\n            newProgress.puzzles = [...(newProgress.puzzles || []), data.puzzleId];\n          }\n          break;\n\n        case 'scramble':\n          if (!newProgress.completedScrambleTasks.includes(data.taskId)) {\n            newProgress.completedScrambleTasks = [...(newProgress.completedScrambleTasks || []), data.taskId];\n          }\n          if (data.score !== undefined) {\n            newProgress.scrambleScores = { ...(newProgress.scrambleScores || {}), [data.taskId]: data.score };\n          }\n          break;\n\n        case 'task':\n          // Initialize arrays if they don't exist\n          if (!newProgress.completedTasks) newProgress.completedTasks = [];\n          if (!newProgress.taskScores) newProgress.taskScores = {};\n          \n          // Add task to completed tasks if not already there\n          if (!newProgress.completedTasks.includes(data.taskId)) {\n            newProgress.completedTasks = [...newProgress.completedTasks, data.taskId];\n            console.log('Added task to completed tasks:', data.taskId);\n          }\n          \n          // Update task score\n          if (data.score !== undefined) {\n            newProgress.taskScores[data.taskId] = data.score;\n            console.log('Updated task score:', data.taskId, data.score);\n          }\n          break;\n      }\n\n      newProgress.lastPlayed = timestamp;\n      \n      // Log the updated progress\n      console.log('Updated game progress:', newProgress);\n      \n      // Ensure the progress is saved to localStorage\n      try {\n        localStorage.setItem('gameProgress', JSON.stringify(newProgress));\n      } catch (error) {\n        console.error('Failed to save progress to localStorage:', error);\n      }\n      \n      return newProgress;\n    });\n  };\n\n  const resetProgress = () => {\n    setGameProgress(initialGameProgress);\n    localStorage.setItem('gameProgress', JSON.stringify(initialGameProgress));\n  };\n\n  const value = {\n    gameProgress,\n    updateGameProgress,\n    resetProgress\n  };\n\n  return (\n    <PlayerContext.Provider value={value}>\n      {children}\n    </PlayerContext.Provider>\n  );\n};\n\nexport const usePlayer = () => {\n  const context = useContext(PlayerContext);\n  if (!context) {\n    throw new Error('usePlayer must be used within a PlayerProvider');\n  }\n  return context;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}