{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\osqel\\\\OneDrive\\\\Desktop\\\\New folder\\\\src\\\\context\\\\PlayerContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PlayerContext = /*#__PURE__*/createContext();\nconst initialGameProgress = {\n  puzzles: [],\n  completedScrambleTasks: [],\n  taskScores: {},\n  completedTasks: [],\n  scrambleScores: {},\n  colorMatchingScores: [],\n  lastPlayed: null\n};\nexport const PlayerProvider = ({\n  children\n}) => {\n  _s();\n  const [gameProgress, setGameProgress] = useState(() => {\n    const savedProgress = localStorage.getItem('gameProgress');\n    return savedProgress ? JSON.parse(savedProgress) : initialGameProgress;\n  });\n  useEffect(() => {\n    try {\n      if (gameProgress) {\n        localStorage.setItem('gameProgress', JSON.stringify(gameProgress));\n        console.log('Progress saved:', gameProgress);\n      }\n    } catch (error) {\n      console.error('Error saving progress:', error);\n    }\n  }, [gameProgress]);\n  const updateGameProgress = (gameType, timestamp, data) => {\n    setGameProgress(prevProgress => {\n      let newProgress = {\n        ...prevProgress\n      };\n      switch (gameType) {\n        case 'puzzle':\n          if (data !== null && data !== void 0 && data.puzzleId) {\n            newProgress.puzzles = [...prevProgress.puzzles, data.puzzleId];\n          }\n          break;\n        case 'scramble':\n          if (data !== null && data !== void 0 && data.taskId) {\n            newProgress.completedScrambleTasks = [...prevProgress.completedScrambleTasks, data.taskId];\n            if (data.score) {\n              newProgress.scrambleScores[data.taskId] = data.score;\n            }\n          }\n          break;\n        case 'task':\n          if (data !== null && data !== void 0 && data.taskId) {\n            newProgress.completedTasks = [...prevProgress.completedTasks, data.taskId];\n            if (data.score) {\n              newProgress.taskScores[data.taskId] = data.score;\n            }\n          }\n          break;\n        case 'colorMatching':\n          newProgress.colorMatchingScores = [...(prevProgress.colorMatchingScores || []), {\n            timestamp,\n            score: data.score\n          }];\n          break;\n        case -1:\n          // Reset\n          newProgress = initialGameProgress;\n          break;\n      }\n      localStorage.setItem('gameProgress', JSON.stringify(newProgress));\n      return newProgress;\n    });\n  };\n  const resetProgress = () => {\n    localStorage.setItem('gameProgress', JSON.stringify(initialGameProgress));\n    setGameProgress(initialGameProgress);\n  };\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      gameProgress,\n      updateGameProgress,\n      resetProgress\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n_s(PlayerProvider, \"Pz6RfhI/LErcu8fIWsCkOXj+TCA=\");\n_c = PlayerProvider;\nexport const usePlayer = () => {\n  _s2();\n  const context = useContext(PlayerContext);\n  if (!context) {\n    throw new Error('usePlayer must be used within a PlayerProvider');\n  }\n  return context;\n};\n_s2(usePlayer, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"PlayerProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","PlayerContext","initialGameProgress","puzzles","completedScrambleTasks","taskScores","completedTasks","scrambleScores","colorMatchingScores","lastPlayed","PlayerProvider","children","_s","gameProgress","setGameProgress","savedProgress","localStorage","getItem","JSON","parse","setItem","stringify","console","log","error","updateGameProgress","gameType","timestamp","data","prevProgress","newProgress","puzzleId","taskId","score","resetProgress","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","usePlayer","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/osqel/OneDrive/Desktop/New folder/src/context/PlayerContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\nconst PlayerContext = createContext();\n\nconst initialGameProgress = {\n  puzzles: [],\n  completedScrambleTasks: [],\n  taskScores: {},\n  completedTasks: [],\n  scrambleScores: {},\n  colorMatchingScores: [],\n  lastPlayed: null\n};\n\nexport const PlayerProvider = ({ children }) => {\n  const [gameProgress, setGameProgress] = useState(() => {\n    const savedProgress = localStorage.getItem('gameProgress');\n    return savedProgress ? JSON.parse(savedProgress) : initialGameProgress;\n  });\n\n  useEffect(() => {\n    try {\n      if (gameProgress) {\n        localStorage.setItem('gameProgress', JSON.stringify(gameProgress));\n        console.log('Progress saved:', gameProgress);\n      }\n    } catch (error) {\n      console.error('Error saving progress:', error);\n    }\n  }, [gameProgress]);\n\n  const updateGameProgress = (gameType, timestamp, data) => {\n    setGameProgress(prevProgress => {\n      let newProgress = { ...prevProgress };\n\n      switch (gameType) {\n        case 'puzzle':\n          if (data?.puzzleId) {\n            newProgress.puzzles = [...prevProgress.puzzles, data.puzzleId];\n          }\n          break;\n\n        case 'scramble':\n          if (data?.taskId) {\n            newProgress.completedScrambleTasks = [...prevProgress.completedScrambleTasks, data.taskId];\n            if (data.score) {\n              newProgress.scrambleScores[data.taskId] = data.score;\n            }\n          }\n          break;\n\n        case 'task':\n          if (data?.taskId) {\n            newProgress.completedTasks = [...prevProgress.completedTasks, data.taskId];\n            if (data.score) {\n              newProgress.taskScores[data.taskId] = data.score;\n            }\n          }\n          break;\n\n        case 'colorMatching':\n          newProgress.colorMatchingScores = [\n            ...prevProgress.colorMatchingScores || [],\n            { timestamp, score: data.score }\n          ];\n          break;\n\n        case -1: // Reset\n          newProgress = initialGameProgress;\n          break;\n      }\n\n      localStorage.setItem('gameProgress', JSON.stringify(newProgress));\n      \n      return newProgress;\n    });\n  };\n\n  const resetProgress = () => {\n    localStorage.setItem('gameProgress', JSON.stringify(initialGameProgress));\n    setGameProgress(initialGameProgress);\n  };\n\n  return (\n    <PlayerContext.Provider value={{ gameProgress, updateGameProgress, resetProgress }}>\n      {children}\n    </PlayerContext.Provider>\n  );\n};\n\nexport const usePlayer = () => {\n  const context = useContext(PlayerContext);\n  if (!context) {\n    throw new Error('usePlayer must be used within a PlayerProvider');\n  }\n  return context;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}