{"ast":null,"code":"import _objectSpread from\"C:/Users/osqel/OneDrive/Desktop/New folder/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useState,useContext,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const PlayerContext=/*#__PURE__*/createContext();export const PlayerProvider=_ref=>{let{children}=_ref;const[playerName,setPlayerName]=useState('');const[showNameModal,setShowNameModal]=useState(true);const[gameProgress,setGameProgress]=useState({completedTasks:[],taskScores:{},completedScrambleTasks:[],scrambleScores:{},completedPuzzles:[],puzzleScores:{},lastPlayedDate:null});useEffect(()=>{const savedName=localStorage.getItem('playerName');const savedProgress=localStorage.getItem('gameProgress');if(savedName){setPlayerName(savedName);setShowNameModal(false);}if(savedProgress){const parsed=JSON.parse(savedProgress);setGameProgress({completedTasks:parsed.completedTasks||[],taskScores:parsed.taskScores||{},completedScrambleTasks:Array.isArray(parsed.completedScrambleTasks)?parsed.completedScrambleTasks:[],scrambleScores:parsed.scrambleScores||{},completedPuzzles:Array.isArray(parsed.completedPuzzles)?parsed.completedPuzzles:[],puzzleScores:parsed.puzzleScores||{},lastPlayedDate:parsed.lastPlayedDate});}},[]);const updatePlayerName=name=>{setPlayerName(name);localStorage.setItem('playerName',name);setShowNameModal(false);};const updateGameProgress=(type,completedItems,scores)=>{console.log('Updating progress:',{type,completedItems,scores});setGameProgress(prev=>{let newProgress=_objectSpread({},prev);if(type==='task'||type==='tasks'){const itemToAdd=Array.isArray(completedItems)?completedItems:[completedItems];const existingTasks=new Set(prev.completedTasks||[]);const newTasks=itemToAdd.filter(item=>!existingTasks.has(item));if(newTasks.length>0){newProgress=_objectSpread(_objectSpread({},prev),{},{completedTasks:[...existingTasks,...newTasks],taskScores:_objectSpread(_objectSpread({},prev.taskScores),typeof scores==='object'?scores:{[completedItems]:scores})});}else{return prev;}}else if(type==='scramble'){const uniqueScrambleTasks=new Set([...(prev.completedScrambleTasks||[]),...(Array.isArray(completedItems)?completedItems:[completedItems])]);newProgress=_objectSpread(_objectSpread({},prev),{},{completedScrambleTasks:Array.from(uniqueScrambleTasks),scrambleScores:_objectSpread(_objectSpread({},prev.scrambleScores),typeof scores==='object'?scores:{[completedItems]:scores})});}else if(type==='puzzle'){const uniquePuzzles=new Set([...(prev.completedPuzzles||[]),...(Array.isArray(completedItems)?completedItems:[completedItems])]);newProgress=_objectSpread(_objectSpread({},prev),{},{completedPuzzles:Array.from(uniquePuzzles),puzzleScores:_objectSpread(_objectSpread({},prev.puzzleScores),typeof scores==='object'?scores:{[completedItems]:scores})});}newProgress.lastPlayedDate=new Date().toISOString();console.log('Saving progress:',newProgress);localStorage.setItem('gameProgress',JSON.stringify(newProgress));return newProgress;});};const resetProgress=()=>{const newProgress={completedTasks:[],taskScores:{},completedScrambleTasks:[],scrambleScores:{},completedPuzzles:[],puzzleScores:{},lastPlayedDate:null};setGameProgress(newProgress);localStorage.setItem('gameProgress',JSON.stringify(newProgress));};return/*#__PURE__*/_jsx(PlayerContext.Provider,{value:{playerName,showNameModal,setShowNameModal,updatePlayerName,gameProgress,updateGameProgress,resetProgress},children:children});};export const usePlayer=()=>{const context=useContext(PlayerContext);if(!context){throw new Error('usePlayer must be used within a PlayerProvider');}return context;};","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","jsx","_jsx","PlayerContext","PlayerProvider","_ref","children","playerName","setPlayerName","showNameModal","setShowNameModal","gameProgress","setGameProgress","completedTasks","taskScores","completedScrambleTasks","scrambleScores","completedPuzzles","puzzleScores","lastPlayedDate","savedName","localStorage","getItem","savedProgress","parsed","JSON","parse","Array","isArray","updatePlayerName","name","setItem","updateGameProgress","type","completedItems","scores","console","log","prev","newProgress","_objectSpread","itemToAdd","existingTasks","Set","newTasks","filter","item","has","length","uniqueScrambleTasks","from","uniquePuzzles","Date","toISOString","stringify","resetProgress","Provider","value","usePlayer","context","Error"],"sources":["C:/Users/osqel/OneDrive/Desktop/New folder/src/context/PlayerContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\n\nconst PlayerContext = createContext();\n\nexport const PlayerProvider = ({ children }) => {\n  const [playerName, setPlayerName] = useState('');\n  const [showNameModal, setShowNameModal] = useState(true);\n  const [gameProgress, setGameProgress] = useState({\n    completedTasks: [],\n    taskScores: {},\n    completedScrambleTasks: [],\n    scrambleScores: {},\n    completedPuzzles: [],\n    puzzleScores: {},\n    lastPlayedDate: null\n  });\n\n  useEffect(() => {\n    const savedName = localStorage.getItem('playerName');\n    const savedProgress = localStorage.getItem('gameProgress');\n    \n    if (savedName) {\n      setPlayerName(savedName);\n      setShowNameModal(false);\n    }\n    \n    if (savedProgress) {\n      const parsed = JSON.parse(savedProgress);\n      setGameProgress({\n        completedTasks: parsed.completedTasks || [],\n        taskScores: parsed.taskScores || {},\n        completedScrambleTasks: Array.isArray(parsed.completedScrambleTasks) ? parsed.completedScrambleTasks : [],\n        scrambleScores: parsed.scrambleScores || {},\n        completedPuzzles: Array.isArray(parsed.completedPuzzles) ? parsed.completedPuzzles : [],\n        puzzleScores: parsed.puzzleScores || {},\n        lastPlayedDate: parsed.lastPlayedDate\n      });\n    }\n  }, []);\n\n  const updatePlayerName = (name) => {\n    setPlayerName(name);\n    localStorage.setItem('playerName', name);\n    setShowNameModal(false);\n  };\n\n  const updateGameProgress = (type, completedItems, scores) => {\n    console.log('Updating progress:', { type, completedItems, scores });\n    \n    setGameProgress(prev => {\n      let newProgress = { ...prev };\n      \n      if (type === 'task' || type === 'tasks') {\n        const itemToAdd = Array.isArray(completedItems) ? completedItems : [completedItems];\n        const existingTasks = new Set(prev.completedTasks || []);\n        const newTasks = itemToAdd.filter(item => !existingTasks.has(item));\n        \n        if (newTasks.length > 0) {\n          newProgress = {\n            ...prev,\n            completedTasks: [...existingTasks, ...newTasks],\n            taskScores: {\n              ...prev.taskScores,\n              ...(typeof scores === 'object' ? scores : { [completedItems]: scores })\n            }\n          };\n        } else {\n          return prev; \n        }\n      } else if (type === 'scramble') {\n        const uniqueScrambleTasks = new Set([\n          ...(prev.completedScrambleTasks || []),\n          ...(Array.isArray(completedItems) ? completedItems : [completedItems])\n        ]);\n\n        newProgress = {\n          ...prev,\n          completedScrambleTasks: Array.from(uniqueScrambleTasks),\n          scrambleScores: {\n            ...prev.scrambleScores,\n            ...(typeof scores === 'object' ? scores : { [completedItems]: scores })\n          }\n        };\n      } else if (type === 'puzzle') {\n        const uniquePuzzles = new Set([\n          ...(prev.completedPuzzles || []),\n          ...(Array.isArray(completedItems) ? completedItems : [completedItems])\n        ]);\n\n        newProgress = {\n          ...prev,\n          completedPuzzles: Array.from(uniquePuzzles),\n          puzzleScores: {\n            ...prev.puzzleScores,\n            ...(typeof scores === 'object' ? scores : { [completedItems]: scores })\n          }\n        };\n      }\n      \n      newProgress.lastPlayedDate = new Date().toISOString();\n      console.log('Saving progress:', newProgress);\n      localStorage.setItem('gameProgress', JSON.stringify(newProgress));\n      return newProgress;\n    });\n  };\n\n  const resetProgress = () => {\n    const newProgress = {\n      completedTasks: [],\n      taskScores: {},\n      completedScrambleTasks: [],\n      scrambleScores: {},\n      completedPuzzles: [],\n      puzzleScores: {},\n      lastPlayedDate: null\n    };\n    setGameProgress(newProgress);\n    localStorage.setItem('gameProgress', JSON.stringify(newProgress));\n  };\n\n  return (\n    <PlayerContext.Provider value={{ \n      playerName, \n      showNameModal, \n      setShowNameModal,\n      updatePlayerName,\n      gameProgress,\n      updateGameProgress,\n      resetProgress\n    }}>\n      {children}\n    </PlayerContext.Provider>\n  );\n};\n\nexport const usePlayer = () => {\n  const context = useContext(PlayerContext);\n  if (!context) {\n    throw new Error('usePlayer must be used within a PlayerProvider');\n  }\n  return context;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}