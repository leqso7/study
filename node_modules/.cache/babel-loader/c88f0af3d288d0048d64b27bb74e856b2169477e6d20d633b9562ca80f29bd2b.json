{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\osqel\\\\OneDrive\\\\Desktop\\\\New folder\\\\src\\\\components\\\\ScrambleGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport '../styles/ScrambleGame.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst categories = {\n  animals: [{\n    name: \"კატა\",\n    image: \"cat.jpg\"\n  }, {\n    name: \"ძაღლი\",\n    image: \"dog.jpg\"\n  }\n  // ... სხვა ცხოველები\n  ],\n  instruments: [{\n    name: \"პიანინო\",\n    image: \"piano.jpg\"\n  }, {\n    name: \"გიტარა\",\n    image: \"guitar.jpg\"\n  }\n  // ... სხვა ინსტრუმენტები\n  ]\n};\nconst ScrambleGame = () => {\n  _s();\n  const [currentCategory, setCurrentCategory] = useState('animals');\n  const [currentAnimal, setCurrentAnimal] = useState(null);\n  const [scrambledLetters, setScrambledLetters] = useState([]);\n  const [placedLetters, setPlacedLetters] = useState([]);\n  const [correctPositions, setCorrectPositions] = useState([]);\n  const [wrongPosition, setWrongPosition] = useState(null);\n  const [showGame, setShowGame] = useState(false);\n  const [completedTasks, setCompletedTasks] = useState(() => {\n    const saved = localStorage.getItem('completedTasks');\n    return saved ? JSON.parse(saved) : {\n      animals: [],\n      instruments: []\n    };\n  });\n  const lettersContainerRef = useRef(null);\n  const targetContainerRef = useRef(null);\n  const [draggedLetter, setDraggedLetter] = useState(null);\n  const [currentTask, setCurrentTask] = useState(null);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    if (completedTasks) {\n      localStorage.setItem('completedTasks', JSON.stringify(completedTasks));\n    }\n  }, [completedTasks]);\n  useEffect(() => {\n    const initGame = async () => {\n      setIsLoading(true);\n      const availableTasks = getAvailableTasks();\n      if (availableTasks.length === 0) {\n        setShowGame(false);\n      } else {\n        const randomTask = availableTasks[Math.floor(Math.random() * availableTasks.length)];\n        await initializeTask(randomTask);\n        setShowGame(true);\n      }\n      setIsLoading(false);\n    };\n    initGame();\n  }, []);\n  const getAvailableTasks = () => {\n    const allTasks = [...categories.animals, ...categories.instruments];\n    const allCompleted = [...completedTasks.animals, ...completedTasks.instruments];\n    return allTasks.filter(task => !allCompleted.includes(task.name));\n  };\n  const initializeTask = async task => {\n    return new Promise(resolve => {\n      setCurrentTask(task);\n      resolve();\n    });\n  };\n  const handleTaskComplete = async taskName => {\n    const category = categories.animals.find(t => t.name === taskName) ? 'animals' : 'instruments';\n    setCompletedTasks(prev => ({\n      ...prev,\n      [category]: [...prev[category], taskName]\n    }));\n    await new Promise(resolve => setTimeout(resolve, 100));\n    const availableTasks = getAvailableTasks();\n    if (availableTasks.length === 0) {\n      setShowGame(false);\n      window.alert('გილოცავთ! თქვენ ყველა ამოცანა შეასრულეთ! 🎉');\n    } else {\n      const nextTask = availableTasks[Math.floor(Math.random() * availableTasks.length)];\n      await initializeTask(nextTask);\n    }\n  };\n  const handleReset = async () => {\n    setIsLoading(true);\n    localStorage.removeItem('completedTasks');\n    setCompletedTasks({\n      animals: [],\n      instruments: []\n    });\n    await new Promise(resolve => setTimeout(resolve, 100));\n    const allTasks = [...categories.animals, ...categories.instruments];\n    const randomTask = allTasks[Math.floor(Math.random() * allTasks.length)];\n    await initializeTask(randomTask);\n    setShowGame(true);\n    setIsLoading(false);\n  };\n  const scrambleWord = word => {\n    const originalLetters = word.split('');\n    let scrambledIndices = Array.from({\n      length: word.length\n    }, (_, i) => i);\n\n    // შევქმნათ ისეთი მასივი სადაც არცერთი ინდექსი არ ემთხვევა თავის ორიგინალ პოზიციას\n    for (let i = 0; i < word.length; i++) {\n      let currentIndex = scrambledIndices[i];\n      if (currentIndex === i) {\n        // თუ ინდექსი ემთხვევა თავის პოზიციას, ვცვლით სხვა პოზიციასთან\n        for (let j = i + 1; j < word.length; j++) {\n          if (scrambledIndices[j] !== i) {\n            // გავცვალოთ პოზიციები\n            [scrambledIndices[i], scrambledIndices[j]] = [scrambledIndices[j], scrambledIndices[i]];\n            break;\n          }\n        }\n        // თუ ვერ ვიპოვეთ შესაფერისი პოზიცია წინ, ვეძებთ უკან\n        if (scrambledIndices[i] === i) {\n          for (let j = i - 1; j >= 0; j--) {\n            if (scrambledIndices[j] !== j) {\n              [scrambledIndices[i], scrambledIndices[j]] = [scrambledIndices[j], scrambledIndices[i]];\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    // ვქმნით საბოლოო არეულ მასივს\n    return scrambledIndices.map((index, i) => ({\n      id: `letter-${i}`,\n      content: originalLetters[index],\n      originalIndex: index\n    }));\n  };\n  const selectRandomAnimal = () => {\n    const availableAnimals = categories[currentCategory].filter(animal => !completedTasks[currentCategory].includes(animal.name));\n    if (availableAnimals.length === 0) {\n      const shouldReset = window.confirm('გილოცავთ! თქვენ ყველა ამოცანა შეასრულეთ! გსურთ თავიდან დაწყება?');\n      if (shouldReset) {\n        localStorage.removeItem('completedTasks');\n        setCompletedTasks({\n          animals: [],\n          instruments: []\n        });\n        const randomAnimal = categories[currentCategory][Math.floor(Math.random() * categories[currentCategory].length)];\n        initializeAnimal(randomAnimal);\n        setShowGame(true);\n      } else {\n        setShowGame(false);\n      }\n      return;\n    }\n    const randomIndex = Math.floor(Math.random() * availableAnimals.length);\n    const randomAnimal = availableAnimals[randomIndex];\n    initializeAnimal(randomAnimal);\n    setShowGame(true);\n  };\n  const initializeAnimal = animal => {\n    setCurrentAnimal(animal);\n    setScrambledLetters(scrambleWord(animal.name));\n    setPlacedLetters(Array(animal.name.length).fill(null));\n    setCorrectPositions([]);\n  };\n  const handleDragStart = (e, letter, index) => {\n    setDraggedLetter({\n      letter,\n      index\n    });\n    e.target.classList.add('dragging');\n  };\n  const handleDragOver = e => {\n    e.preventDefault();\n  };\n  const handleDrop = (e, targetIndex) => {\n    e.preventDefault();\n    if (!draggedLetter) return;\n    if (draggedLetter.letter.content !== currentAnimal.name[targetIndex]) {\n      setWrongPosition(targetIndex);\n      setTimeout(() => {\n        setWrongPosition(null);\n      }, 500);\n      return;\n    }\n    const newPlacedLetters = [...placedLetters];\n    const newScrambledLetters = [...scrambledLetters];\n    newPlacedLetters[targetIndex] = draggedLetter.letter;\n    newScrambledLetters.splice(draggedLetter.index, 1);\n    setPlacedLetters(newPlacedLetters);\n    setScrambledLetters(newScrambledLetters);\n    const newCorrectPositions = [];\n    newPlacedLetters.forEach((letter, index) => {\n      if (letter && letter.content === currentAnimal.name[index]) {\n        newCorrectPositions.push(index);\n      }\n    });\n    setCorrectPositions(newCorrectPositions);\n    if (newCorrectPositions.length === currentAnimal.name.length) {\n      const newCompletedTasks = {\n        ...completedTasks,\n        [currentCategory]: [...completedTasks[currentCategory], currentAnimal.name]\n      };\n      setCompletedTasks(newCompletedTasks);\n      localStorage.setItem('completedTasks', JSON.stringify(newCompletedTasks));\n      if (newCompletedTasks.animals.length === categories.animals.length && newCompletedTasks.instruments.length === categories.instruments.length) {\n        setShowGame(false);\n        window.alert('გილოცავთ! თქვენ ყველა ამოცანა შეასრულეთ! 🎉');\n      } else {\n        setShowGame(false);\n      }\n    }\n  };\n  const startNewGame = () => {\n    // ჯერ ვცდილობთ მიმდინარე კატეგორიიდან\n    let availableTasks = categories[currentCategory].filter(item => !completedTasks[currentCategory].includes(item.name));\n\n    // თუ მიმდინარე კატეგორია ცარიელია, ვცდილობთ სხვა კატეგორიას\n    if (availableTasks.length === 0) {\n      const otherCategory = currentCategory === 'animals' ? 'instruments' : 'animals';\n      availableTasks = categories[otherCategory].filter(item => !completedTasks[otherCategory].includes(item.name));\n      if (availableTasks.length > 0) {\n        setCurrentCategory(otherCategory);\n      } else {\n        window.alert('გილოცავთ! თქვენ ყველა ამოცანა შეასრულეთ! 🎉');\n        return;\n      }\n    }\n    const randomTask = availableTasks[Math.floor(Math.random() * availableTasks.length)];\n    initializeAnimal(randomTask);\n    setShowGame(true);\n  };\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\u10D8\\u10E2\\u10D5\\u10D8\\u10E0\\u10D7\\u10D4\\u10D1\\u10D0...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 12\n    }, this);\n  }\n  if (!currentAnimal || !showGame) {\n    const remainingCount = categories[currentCategory].length - completedTasks[currentCategory].length;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scramble-game\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"game-title\",\n        children: \"\\u10E1\\u10D0\\u10EE\\u10D0\\u10DA\\u10D8\\u10E1\\u10DD \\u10D0\\u10DB\\u10DD\\u10EA\\u10D0\\u10DC\\u10D4\\u10D1\\u10D8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"progress-text\",\n        children: [\"\\u10E8\\u10D4\\u10E1\\u10E0\\u10E3\\u10DA\\u10D4\\u10D1\\u10E3\\u10DA\\u10D8 \\u10D0\\u10DB\\u10DD\\u10EA\\u10D0\\u10DC\\u10D4\\u10D1\\u10D8: \", completedTasks[currentCategory].length, \" / \", categories[currentCategory].length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startNewGame,\n        className: \"scramble-button\",\n        children: [\"\\u10E8\\u10D4\\u10DB\\u10D3\\u10D4\\u10D2\\u10D8 \\u10D0\\u10DB\\u10DD\\u10EA\\u10D0\\u10DC\\u10D0 \", remainingCount > 0 ? `(დარჩენილია ${remainingCount})` : '']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }, this), completedTasks[currentCategory].length === categories[currentCategory].length && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleReset,\n        className: \"scramble-button reset\",\n        children: \"\\u10D7\\u10D0\\u10D5\\u10D8\\u10D3\\u10D0\\u10DC \\u10D3\\u10D0\\u10EC\\u10E7\\u10D4\\u10D1\\u10D0\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"scramble-game\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"game-title\",\n      children: \"\\u10D3\\u10D0\\u10D0\\u10DA\\u10D0\\u10D2\\u10D4 \\u10D0\\u10E1\\u10DD\\u10D4\\u10D1\\u10D8 \\u10E1\\u10EC\\u10DD\\u10E0\\u10D0\\u10D3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 283,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"game-instructions\",\n      children: \"\\u10D2\\u10D0\\u10D3\\u10DB\\u10DD\\u10D8\\u10E2\\u10D0\\u10DC\\u10D4 \\u10D0\\u10E1\\u10DD\\u10D4\\u10D1\\u10D8 \\u10D3\\u10D0 \\u10E9\\u10D0\\u10E1\\u10D5\\u10D8 \\u10E1\\u10EC\\u10DD\\u10E0 \\u10D0\\u10D3\\u10D2\\u10D8\\u10DA\\u10D0\\u10E1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"progress-text\",\n      children: [\"\\u10D3\\u10D0\\u10E0\\u10E9\\u10D4\\u10DC\\u10D8\\u10DA\\u10D8 \\u10D0\\u10DB\\u10DD\\u10EA\\u10D0\\u10DC\\u10D4\\u10D1\\u10D8: \", categories[currentCategory].length - completedTasks[currentCategory].length, \" / \", categories[currentCategory].length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      src: `${process.env.PUBLIC_URL}/photos/${currentAnimal.image}`,\n      alt: currentAnimal.name,\n      className: \"animal-image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 291,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: targetContainerRef,\n      className: \"target-container\",\n      children: placedLetters.map((letter, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `letter-slot ${correctPositions.includes(index) ? 'correct' : ''} \n                      ${letter ? 'filled' : ''} \n                      ${wrongPosition === index ? 'wrong' : ''}`,\n        onDragOver: handleDragOver,\n        onDrop: e => handleDrop(e, index),\n        children: letter && letter.content\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 302,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: lettersContainerRef,\n      className: \"letters-container\",\n      children: scrambledLetters.map((letter, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        \"data-id\": letter.id,\n        className: \"letter\",\n        draggable: true,\n        onDragStart: e => handleDragStart(e, letter, index),\n        children: letter.content\n      }, letter.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 282,\n    columnNumber: 5\n  }, this);\n};\n_s(ScrambleGame, \"4Vlmf4JxLXophH/zDT3kCgvDl2Q=\");\n_c = ScrambleGame;\nexport default ScrambleGame;\nvar _c;\n$RefreshReg$(_c, \"ScrambleGame\");","map":{"version":3,"names":["React","useState","useEffect","useRef","jsxDEV","_jsxDEV","categories","animals","name","image","instruments","ScrambleGame","_s","currentCategory","setCurrentCategory","currentAnimal","setCurrentAnimal","scrambledLetters","setScrambledLetters","placedLetters","setPlacedLetters","correctPositions","setCorrectPositions","wrongPosition","setWrongPosition","showGame","setShowGame","completedTasks","setCompletedTasks","saved","localStorage","getItem","JSON","parse","lettersContainerRef","targetContainerRef","draggedLetter","setDraggedLetter","currentTask","setCurrentTask","isLoading","setIsLoading","setItem","stringify","initGame","availableTasks","getAvailableTasks","length","randomTask","Math","floor","random","initializeTask","allTasks","allCompleted","filter","task","includes","Promise","resolve","handleTaskComplete","taskName","category","find","t","prev","setTimeout","window","alert","nextTask","handleReset","removeItem","scrambleWord","word","originalLetters","split","scrambledIndices","Array","from","_","i","currentIndex","j","map","index","id","content","originalIndex","selectRandomAnimal","availableAnimals","animal","shouldReset","confirm","randomAnimal","initializeAnimal","randomIndex","fill","handleDragStart","e","letter","target","classList","add","handleDragOver","preventDefault","handleDrop","targetIndex","newPlacedLetters","newScrambledLetters","splice","newCorrectPositions","forEach","push","newCompletedTasks","startNewGame","item","otherCategory","children","fileName","_jsxFileName","lineNumber","columnNumber","remainingCount","className","onClick","src","process","env","PUBLIC_URL","alt","ref","onDragOver","onDrop","draggable","onDragStart","_c","$RefreshReg$"],"sources":["C:/Users/osqel/OneDrive/Desktop/New folder/src/components/ScrambleGame.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport '../styles/ScrambleGame.css';\r\n\r\nconst categories = {\r\n  animals: [\r\n    { name: \"კატა\", image: \"cat.jpg\" },\r\n    { name: \"ძაღლი\", image: \"dog.jpg\" },\r\n    // ... სხვა ცხოველები\r\n  ],\r\n  instruments: [\r\n    { name: \"პიანინო\", image: \"piano.jpg\" },\r\n    { name: \"გიტარა\", image: \"guitar.jpg\" },\r\n    // ... სხვა ინსტრუმენტები\r\n  ]\r\n};\r\n\r\nconst ScrambleGame = () => {\r\n  const [currentCategory, setCurrentCategory] = useState('animals');\r\n  const [currentAnimal, setCurrentAnimal] = useState(null);\r\n  const [scrambledLetters, setScrambledLetters] = useState([]);\r\n  const [placedLetters, setPlacedLetters] = useState([]);\r\n  const [correctPositions, setCorrectPositions] = useState([]);\r\n  const [wrongPosition, setWrongPosition] = useState(null);\r\n  const [showGame, setShowGame] = useState(false);\r\n  const [completedTasks, setCompletedTasks] = useState(() => {\r\n    const saved = localStorage.getItem('completedTasks');\r\n    return saved ? JSON.parse(saved) : { animals: [], instruments: [] };\r\n  });\r\n  const lettersContainerRef = useRef(null);\r\n  const targetContainerRef = useRef(null);\r\n  const [draggedLetter, setDraggedLetter] = useState(null);\r\n  const [currentTask, setCurrentTask] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (completedTasks) {\r\n      localStorage.setItem('completedTasks', JSON.stringify(completedTasks));\r\n    }\r\n  }, [completedTasks]);\r\n\r\n  useEffect(() => {\r\n    const initGame = async () => {\r\n      setIsLoading(true);\r\n      const availableTasks = getAvailableTasks();\r\n      \r\n      if (availableTasks.length === 0) {\r\n        setShowGame(false);\r\n      } else {\r\n        const randomTask = availableTasks[Math.floor(Math.random() * availableTasks.length)];\r\n        await initializeTask(randomTask);\r\n        setShowGame(true);\r\n      }\r\n      setIsLoading(false);\r\n    };\r\n\r\n    initGame();\r\n  }, []);\r\n\r\n  const getAvailableTasks = () => {\r\n    const allTasks = [...categories.animals, ...categories.instruments];\r\n    const allCompleted = [...completedTasks.animals, ...completedTasks.instruments];\r\n    return allTasks.filter(task => !allCompleted.includes(task.name));\r\n  };\r\n\r\n  const initializeTask = async (task) => {\r\n    return new Promise(resolve => {\r\n      setCurrentTask(task);\r\n      resolve();\r\n    });\r\n  };\r\n\r\n  const handleTaskComplete = async (taskName) => {\r\n    const category = categories.animals.find(t => t.name === taskName) \r\n      ? 'animals' \r\n      : 'instruments';\r\n\r\n    setCompletedTasks(prev => ({\r\n      ...prev,\r\n      [category]: [...prev[category], taskName]\r\n    }));\r\n\r\n    await new Promise(resolve => setTimeout(resolve, 100));\r\n\r\n    const availableTasks = getAvailableTasks();\r\n    if (availableTasks.length === 0) {\r\n      setShowGame(false);\r\n      window.alert('გილოცავთ! თქვენ ყველა ამოცანა შეასრულეთ! 🎉');\r\n    } else {\r\n      const nextTask = availableTasks[Math.floor(Math.random() * availableTasks.length)];\r\n      await initializeTask(nextTask);\r\n    }\r\n  };\r\n\r\n  const handleReset = async () => {\r\n    setIsLoading(true);\r\n    localStorage.removeItem('completedTasks');\r\n    setCompletedTasks({ animals: [], instruments: [] });\r\n    \r\n    await new Promise(resolve => setTimeout(resolve, 100));\r\n    \r\n    const allTasks = [...categories.animals, ...categories.instruments];\r\n    const randomTask = allTasks[Math.floor(Math.random() * allTasks.length)];\r\n    await initializeTask(randomTask);\r\n    setShowGame(true);\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const scrambleWord = (word) => {\r\n    const originalLetters = word.split('');\r\n    let scrambledIndices = Array.from({ length: word.length }, (_, i) => i);\r\n    \r\n    // შევქმნათ ისეთი მასივი სადაც არცერთი ინდექსი არ ემთხვევა თავის ორიგინალ პოზიციას\r\n    for (let i = 0; i < word.length; i++) {\r\n      let currentIndex = scrambledIndices[i];\r\n      if (currentIndex === i) {\r\n        // თუ ინდექსი ემთხვევა თავის პოზიციას, ვცვლით სხვა პოზიციასთან\r\n        for (let j = i + 1; j < word.length; j++) {\r\n          if (scrambledIndices[j] !== i) {\r\n            // გავცვალოთ პოზიციები\r\n            [scrambledIndices[i], scrambledIndices[j]] = [scrambledIndices[j], scrambledIndices[i]];\r\n            break;\r\n          }\r\n        }\r\n        // თუ ვერ ვიპოვეთ შესაფერისი პოზიცია წინ, ვეძებთ უკან\r\n        if (scrambledIndices[i] === i) {\r\n          for (let j = i - 1; j >= 0; j--) {\r\n            if (scrambledIndices[j] !== j) {\r\n              [scrambledIndices[i], scrambledIndices[j]] = [scrambledIndices[j], scrambledIndices[i]];\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    \r\n    // ვქმნით საბოლოო არეულ მასივს\r\n    return scrambledIndices.map((index, i) => ({\r\n      id: `letter-${i}`,\r\n      content: originalLetters[index],\r\n      originalIndex: index\r\n    }));\r\n  };\r\n\r\n  const selectRandomAnimal = () => {\r\n    const availableAnimals = categories[currentCategory].filter(animal => !completedTasks[currentCategory].includes(animal.name));\r\n    \r\n    if (availableAnimals.length === 0) {\r\n      const shouldReset = window.confirm('გილოცავთ! თქვენ ყველა ამოცანა შეასრულეთ! გსურთ თავიდან დაწყება?');\r\n      if (shouldReset) {\r\n        localStorage.removeItem('completedTasks');\r\n        setCompletedTasks({ animals: [], instruments: [] });\r\n        const randomAnimal = categories[currentCategory][Math.floor(Math.random() * categories[currentCategory].length)];\r\n        initializeAnimal(randomAnimal);\r\n        setShowGame(true);\r\n      } else {\r\n        setShowGame(false);\r\n      }\r\n      return;\r\n    }\r\n    \r\n    const randomIndex = Math.floor(Math.random() * availableAnimals.length);\r\n    const randomAnimal = availableAnimals[randomIndex];\r\n    \r\n    initializeAnimal(randomAnimal);\r\n    setShowGame(true);\r\n  };\r\n\r\n  const initializeAnimal = (animal) => {\r\n    setCurrentAnimal(animal);\r\n    setScrambledLetters(scrambleWord(animal.name));\r\n    setPlacedLetters(Array(animal.name.length).fill(null));\r\n    setCorrectPositions([]);\r\n  };\r\n\r\n  const handleDragStart = (e, letter, index) => {\r\n    setDraggedLetter({ letter, index });\r\n    e.target.classList.add('dragging');\r\n  };\r\n\r\n  const handleDragOver = (e) => {\r\n    e.preventDefault();\r\n  };\r\n\r\n  const handleDrop = (e, targetIndex) => {\r\n    e.preventDefault();\r\n    if (!draggedLetter) return;\r\n\r\n    if (draggedLetter.letter.content !== currentAnimal.name[targetIndex]) {\r\n      setWrongPosition(targetIndex);\r\n      setTimeout(() => {\r\n        setWrongPosition(null);\r\n      }, 500);\r\n      return;\r\n    }\r\n\r\n    const newPlacedLetters = [...placedLetters];\r\n    const newScrambledLetters = [...scrambledLetters];\r\n\r\n    newPlacedLetters[targetIndex] = draggedLetter.letter;\r\n    newScrambledLetters.splice(draggedLetter.index, 1);\r\n\r\n    setPlacedLetters(newPlacedLetters);\r\n    setScrambledLetters(newScrambledLetters);\r\n\r\n    const newCorrectPositions = [];\r\n    newPlacedLetters.forEach((letter, index) => {\r\n      if (letter && letter.content === currentAnimal.name[index]) {\r\n        newCorrectPositions.push(index);\r\n      }\r\n    });\r\n\r\n    setCorrectPositions(newCorrectPositions);\r\n\r\n    if (newCorrectPositions.length === currentAnimal.name.length) {\r\n      const newCompletedTasks = {\r\n        ...completedTasks,\r\n        [currentCategory]: [...completedTasks[currentCategory], currentAnimal.name]\r\n      };\r\n      setCompletedTasks(newCompletedTasks);\r\n      localStorage.setItem('completedTasks', JSON.stringify(newCompletedTasks));\r\n      \r\n      if (newCompletedTasks.animals.length === categories.animals.length && newCompletedTasks.instruments.length === categories.instruments.length) {\r\n        setShowGame(false);\r\n        window.alert('გილოცავთ! თქვენ ყველა ამოცანა შეასრულეთ! 🎉');\r\n      } else {\r\n        setShowGame(false);\r\n      }\r\n    }\r\n  };\r\n\r\n  const startNewGame = () => {\r\n    // ჯერ ვცდილობთ მიმდინარე კატეგორიიდან\r\n    let availableTasks = categories[currentCategory].filter(\r\n      item => !completedTasks[currentCategory].includes(item.name)\r\n    );\r\n\r\n    // თუ მიმდინარე კატეგორია ცარიელია, ვცდილობთ სხვა კატეგორიას\r\n    if (availableTasks.length === 0) {\r\n      const otherCategory = currentCategory === 'animals' ? 'instruments' : 'animals';\r\n      availableTasks = categories[otherCategory].filter(\r\n        item => !completedTasks[otherCategory].includes(item.name)\r\n      );\r\n      \r\n      if (availableTasks.length > 0) {\r\n        setCurrentCategory(otherCategory);\r\n      } else {\r\n        window.alert('გილოცავთ! თქვენ ყველა ამოცანა შეასრულეთ! 🎉');\r\n        return;\r\n      }\r\n    }\r\n\r\n    const randomTask = availableTasks[Math.floor(Math.random() * availableTasks.length)];\r\n    initializeAnimal(randomTask);\r\n    setShowGame(true);\r\n  };\r\n\r\n  if (isLoading) {\r\n    return <div>იტვირთება...</div>;\r\n  }\r\n\r\n  if (!currentAnimal || !showGame) {\r\n    const remainingCount = categories[currentCategory].length - completedTasks[currentCategory].length;\r\n    return (\r\n      <div className=\"scramble-game\">\r\n        <h2 className=\"game-title\">სახალისო ამოცანები</h2>\r\n        <p className=\"progress-text\">\r\n          შესრულებული ამოცანები: {completedTasks[currentCategory].length} / {categories[currentCategory].length}\r\n        </p>\r\n        <button onClick={startNewGame} className=\"scramble-button\">\r\n          შემდეგი ამოცანა {remainingCount > 0 ? `(დარჩენილია ${remainingCount})` : ''}\r\n        </button>\r\n        {completedTasks[currentCategory].length === categories[currentCategory].length && (\r\n          <button onClick={handleReset} className=\"scramble-button reset\">\r\n            თავიდან დაწყება\r\n          </button>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"scramble-game\">\r\n      <h2 className=\"game-title\">დაალაგე ასოები სწორად</h2>\r\n      <p className=\"game-instructions\">\r\n        გადმოიტანე ასოები და ჩასვი სწორ ადგილას\r\n      </p>\r\n      <p className=\"progress-text\">\r\n        დარჩენილი ამოცანები: {categories[currentCategory].length - completedTasks[currentCategory].length} / {categories[currentCategory].length}\r\n      </p>\r\n      \r\n      <img \r\n        src={`${process.env.PUBLIC_URL}/photos/${currentAnimal.image}`} \r\n        alt={currentAnimal.name}\r\n        className=\"animal-image\"\r\n      />\r\n      \r\n      <div \r\n        ref={targetContainerRef}\r\n        className=\"target-container\"\r\n      >\r\n        {placedLetters.map((letter, index) => (\r\n          <div\r\n            key={index}\r\n            className={`letter-slot ${correctPositions.includes(index) ? 'correct' : ''} \r\n                      ${letter ? 'filled' : ''} \r\n                      ${wrongPosition === index ? 'wrong' : ''}`}\r\n            onDragOver={handleDragOver}\r\n            onDrop={(e) => handleDrop(e, index)}\r\n          >\r\n            {letter && letter.content}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <div \r\n        ref={lettersContainerRef}\r\n        className=\"letters-container\"\r\n      >\r\n        {scrambledLetters.map((letter, index) => (\r\n          <div\r\n            key={letter.id}\r\n            data-id={letter.id}\r\n            className=\"letter\"\r\n            draggable={true}\r\n            onDragStart={(e) => handleDragStart(e, letter, index)}\r\n          >\r\n            {letter.content}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ScrambleGame; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}